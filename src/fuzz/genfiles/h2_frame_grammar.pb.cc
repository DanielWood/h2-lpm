// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: h2_frame_grammar.proto

#include "h2_frame_grammar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace h2proto {
constexpr Frame::Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct FrameDefaultTypeInternal {
  constexpr FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameDefaultTypeInternal _Frame_default_instance_;
constexpr DataFrame::DataFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pad_length_(0u)
  , end_stream_(false)
  , stream_id_(0u){}
struct DataFrameDefaultTypeInternal {
  constexpr DataFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataFrameDefaultTypeInternal() {}
  union {
    DataFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataFrameDefaultTypeInternal _DataFrame_default_instance_;
constexpr HPackInt::HPackInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u})
  , prefix_(0u)
  , msb_mask_(0u){}
struct HPackIntDefaultTypeInternal {
  constexpr HPackIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HPackIntDefaultTypeInternal() {}
  union {
    HPackInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HPackIntDefaultTypeInternal _HPackInt_default_instance_;
constexpr HPackString::HPackString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , force_literal_(false)
  , huffman_(false){}
struct HPackStringDefaultTypeInternal {
  constexpr HPackStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HPackStringDefaultTypeInternal() {}
  union {
    HPackString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HPackStringDefaultTypeInternal _HPackString_default_instance_;
constexpr HeaderField::HeaderField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(nullptr)
  , value_(nullptr)
  , indexing_(0)
{}
struct HeaderFieldDefaultTypeInternal {
  constexpr HeaderFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderFieldDefaultTypeInternal() {}
  union {
    HeaderField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderFieldDefaultTypeInternal _HeaderField_default_instance_;
constexpr HeadersFrame::HeadersFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_list_()
  , pad_length_(0u)
  , stream_dependency_(0u)
  , weight_(0u)
  , exclusive_(false)
  , end_stream_(false)
  , end_headers_(false)
  , priority_(false)
  , stream_id_(0u){}
struct HeadersFrameDefaultTypeInternal {
  constexpr HeadersFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadersFrameDefaultTypeInternal() {}
  union {
    HeadersFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadersFrameDefaultTypeInternal _HeadersFrame_default_instance_;
constexpr PriorityFrame::PriorityFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exclusive_(false)
  , stream_dependency_(0u)
  , weight_(0u)
  , stream_id_(0u){}
struct PriorityFrameDefaultTypeInternal {
  constexpr PriorityFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PriorityFrameDefaultTypeInternal() {}
  union {
    PriorityFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PriorityFrameDefaultTypeInternal _PriorityFrame_default_instance_;
constexpr RstStreamFrame::RstStreamFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_code_(0u)
  , stream_id_(0u){}
struct RstStreamFrameDefaultTypeInternal {
  constexpr RstStreamFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RstStreamFrameDefaultTypeInternal() {}
  union {
    RstStreamFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RstStreamFrameDefaultTypeInternal _RstStreamFrame_default_instance_;
constexpr SettingsFrame::SettingsFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_table_size_(0u)
  , max_concurrent_streams_(0u)
  , initial_window_size_(0u)
  , enable_push_(false)
  , ack_(false)
  , max_frame_size_(0u)
  , max_header_list_size_(0u){}
struct SettingsFrameDefaultTypeInternal {
  constexpr SettingsFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SettingsFrameDefaultTypeInternal() {}
  union {
    SettingsFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SettingsFrameDefaultTypeInternal _SettingsFrame_default_instance_;
constexpr PushPromiseFrame::PushPromiseFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_list_()
  , pad_length_(0u)
  , promised_stream_id_(0u)
  , end_headers_(false)
  , stream_id_(0u){}
struct PushPromiseFrameDefaultTypeInternal {
  constexpr PushPromiseFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushPromiseFrameDefaultTypeInternal() {}
  union {
    PushPromiseFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushPromiseFrameDefaultTypeInternal _PushPromiseFrame_default_instance_;
constexpr PingFrame::PingFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaque_data_lo_(0u)
  , opaque_data_hi_(0u)
  , ack_(false){}
struct PingFrameDefaultTypeInternal {
  constexpr PingFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingFrameDefaultTypeInternal() {}
  union {
    PingFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingFrameDefaultTypeInternal _PingFrame_default_instance_;
constexpr GoawayFrame::GoawayFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opaque_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_stream_id_(0u)
  , error_code_(0u){}
struct GoawayFrameDefaultTypeInternal {
  constexpr GoawayFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GoawayFrameDefaultTypeInternal() {}
  union {
    GoawayFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GoawayFrameDefaultTypeInternal _GoawayFrame_default_instance_;
constexpr WindowUpdateFrame::WindowUpdateFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : window_size_increment_(0u){}
struct WindowUpdateFrameDefaultTypeInternal {
  constexpr WindowUpdateFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WindowUpdateFrameDefaultTypeInternal() {}
  union {
    WindowUpdateFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WindowUpdateFrameDefaultTypeInternal _WindowUpdateFrame_default_instance_;
constexpr ContinuationFrame::ContinuationFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_list_()
  , end_headers_(false)
  , stream_id_(0u){}
struct ContinuationFrameDefaultTypeInternal {
  constexpr ContinuationFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContinuationFrameDefaultTypeInternal() {}
  union {
    ContinuationFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContinuationFrameDefaultTypeInternal _ContinuationFrame_default_instance_;
}  // namespace h2proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_h2_5fframe_5fgrammar_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_h2_5fframe_5fgrammar_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_h2_5fframe_5fgrammar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_h2_5fframe_5fgrammar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::h2proto::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::h2proto::Frame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::h2proto::Frame, frame_oneof_),
  PROTOBUF_FIELD_OFFSET(::h2proto::DataFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::DataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::DataFrame, pad_length_),
  PROTOBUF_FIELD_OFFSET(::h2proto::DataFrame, data_),
  PROTOBUF_FIELD_OFFSET(::h2proto::DataFrame, end_stream_),
  PROTOBUF_FIELD_OFFSET(::h2proto::DataFrame, stream_id_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackInt, value_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackInt, prefix_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackInt, msb_mask_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackString, data_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackString, force_literal_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HPackString, huffman_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::h2proto::HeaderField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeaderField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::HeaderField, name_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeaderField, value_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeaderField, indexing_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, pad_length_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, exclusive_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, stream_dependency_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, weight_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, header_list_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, end_stream_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, end_headers_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, priority_),
  PROTOBUF_FIELD_OFFSET(::h2proto::HeadersFrame, stream_id_),
  0,
  3,
  1,
  2,
  ~0u,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::h2proto::PriorityFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PriorityFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::PriorityFrame, exclusive_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PriorityFrame, stream_dependency_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PriorityFrame, weight_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PriorityFrame, stream_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::h2proto::RstStreamFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::RstStreamFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::RstStreamFrame, error_code_),
  PROTOBUF_FIELD_OFFSET(::h2proto::RstStreamFrame, stream_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, header_table_size_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, enable_push_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, max_concurrent_streams_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, initial_window_size_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, max_frame_size_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, max_header_list_size_),
  PROTOBUF_FIELD_OFFSET(::h2proto::SettingsFrame, ack_),
  0,
  3,
  1,
  2,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, pad_length_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, promised_stream_id_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, header_list_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, end_headers_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PushPromiseFrame, stream_id_),
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::h2proto::PingFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PingFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::PingFrame, opaque_data_lo_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PingFrame, opaque_data_hi_),
  PROTOBUF_FIELD_OFFSET(::h2proto::PingFrame, ack_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::h2proto::GoawayFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::GoawayFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::GoawayFrame, last_stream_id_),
  PROTOBUF_FIELD_OFFSET(::h2proto::GoawayFrame, error_code_),
  PROTOBUF_FIELD_OFFSET(::h2proto::GoawayFrame, opaque_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::h2proto::WindowUpdateFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::WindowUpdateFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::WindowUpdateFrame, window_size_increment_),
  0,
  PROTOBUF_FIELD_OFFSET(::h2proto::ContinuationFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::h2proto::ContinuationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::h2proto::ContinuationFrame, header_list_),
  PROTOBUF_FIELD_OFFSET(::h2proto::ContinuationFrame, end_headers_),
  PROTOBUF_FIELD_OFFSET(::h2proto::ContinuationFrame, stream_id_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::h2proto::Frame)},
  { 16, 25, sizeof(::h2proto::DataFrame)},
  { 29, 37, sizeof(::h2proto::HPackInt)},
  { 40, 48, sizeof(::h2proto::HPackString)},
  { 51, 59, sizeof(::h2proto::HeaderField)},
  { 62, 76, sizeof(::h2proto::HeadersFrame)},
  { 85, 94, sizeof(::h2proto::PriorityFrame)},
  { 98, 105, sizeof(::h2proto::RstStreamFrame)},
  { 107, 119, sizeof(::h2proto::SettingsFrame)},
  { 126, 136, sizeof(::h2proto::PushPromiseFrame)},
  { 141, 149, sizeof(::h2proto::PingFrame)},
  { 152, 160, sizeof(::h2proto::GoawayFrame)},
  { 163, 169, sizeof(::h2proto::WindowUpdateFrame)},
  { 170, 178, sizeof(::h2proto::ContinuationFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_DataFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_HPackInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_HPackString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_HeaderField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_HeadersFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_PriorityFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_RstStreamFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_SettingsFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_PushPromiseFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_PingFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_GoawayFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_WindowUpdateFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::h2proto::_ContinuationFrame_default_instance_),
};

const char descriptor_table_protodef_h2_5fframe_5fgrammar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026h2_frame_grammar.proto\022\007h2proto\"\217\004\n\005Fr"
  "ame\022(\n\ndata_frame\030\001 \001(\0132\022.h2proto.DataFr"
  "ameH\000\022.\n\rheaders_frame\030\002 \001(\0132\025.h2proto.H"
  "eadersFrameH\000\0220\n\016priority_frame\030\003 \001(\0132\026."
  "h2proto.PriorityFrameH\000\0223\n\020rst_stream_fr"
  "ame\030\004 \001(\0132\027.h2proto.RstStreamFrameH\000\0220\n\016"
  "settings_frame\030\005 \001(\0132\026.h2proto.SettingsF"
  "rameH\000\0227\n\022push_promise_frame\030\006 \001(\0132\031.h2p"
  "roto.PushPromiseFrameH\000\022(\n\nping_frame\030\007 "
  "\001(\0132\022.h2proto.PingFrameH\000\022,\n\014goaway_fram"
  "e\030\010 \001(\0132\024.h2proto.GoawayFrameH\000\0229\n\023windo"
  "w_update_frame\030\t \001(\0132\032.h2proto.WindowUpd"
  "ateFrameH\000\0228\n\022continuation_frame\030\n \001(\0132\032"
  ".h2proto.ContinuationFrameH\000B\r\n\013frame_on"
  "eof\"T\n\tDataFrame\022\022\n\npad_length\030\001 \001(\r\022\014\n\004"
  "data\030\002 \002(\014\022\022\n\nend_stream\030\003 \002(\010\022\021\n\tstream"
  "_id\030\004 \002(\r\";\n\010HPackInt\022\r\n\005value\030\001 \002(\004\022\016\n\006"
  "prefix\030\002 \002(\r\022\020\n\010msb_mask\030\003 \002(\r\"C\n\013HPackS"
  "tring\022\014\n\004data\030\001 \002(\014\022\025\n\rforce_literal\030\002 \002"
  "(\010\022\017\n\007huffman\030\003 \002(\010\"\312\001\n\013HeaderField\022\"\n\004n"
  "ame\030\001 \002(\0132\024.h2proto.HPackString\022#\n\005value"
  "\030\002 \002(\0132\024.h2proto.HPackString\022/\n\010indexing"
  "\030\006 \002(\0162\035.h2proto.HeaderField.Indexing\"A\n"
  "\010Indexing\022\017\n\013INCREMENTAL\020\000\022\021\n\rWITHOUT_IN"
  "DEX\020\001\022\021\n\rNEVER_INDEXED\020\002\"\331\001\n\014HeadersFram"
  "e\022\022\n\npad_length\030\001 \001(\r\022\021\n\texclusive\030\002 \002(\010"
  "\022\031\n\021stream_dependency\030\003 \002(\r\022\016\n\006weight\030\004 "
  "\002(\r\022)\n\013header_list\030\005 \003(\0132\024.h2proto.Heade"
  "rField\022\022\n\nend_stream\030\006 \002(\010\022\023\n\013end_header"
  "s\030\007 \002(\010\022\020\n\010priority\030\010 \002(\010\022\021\n\tstream_id\030\t"
  " \002(\r\"`\n\rPriorityFrame\022\021\n\texclusive\030\001 \002(\010"
  "\022\031\n\021stream_dependency\030\002 \002(\r\022\016\n\006weight\030\003 "
  "\002(\r\022\021\n\tstream_id\030\004 \002(\r\"7\n\016RstStreamFrame"
  "\022\022\n\nerror_code\030\001 \002(\r\022\021\n\tstream_id\030\002 \002(\r\""
  "\277\001\n\rSettingsFrame\022\031\n\021header_table_size\030\001"
  " \001(\r\022\023\n\013enable_push\030\002 \001(\010\022\036\n\026max_concurr"
  "ent_streams\030\003 \001(\r\022\033\n\023initial_window_size"
  "\030\004 \001(\r\022\026\n\016max_frame_size\030\005 \001(\r\022\034\n\024max_he"
  "ader_list_size\030\006 \001(\r\022\013\n\003ack\030\007 \002(\010\"\225\001\n\020Pu"
  "shPromiseFrame\022\022\n\npad_length\030\001 \001(\r\022\032\n\022pr"
  "omised_stream_id\030\002 \002(\r\022)\n\013header_list\030\003 "
  "\003(\0132\024.h2proto.HeaderField\022\023\n\013end_headers"
  "\030\004 \002(\010\022\021\n\tstream_id\030\005 \002(\r\"H\n\tPingFrame\022\026"
  "\n\016opaque_data_lo\030\001 \002(\r\022\026\n\016opaque_data_hi"
  "\030\002 \002(\r\022\013\n\003ack\030\003 \002(\010\"N\n\013GoawayFrame\022\026\n\016la"
  "st_stream_id\030\001 \002(\r\022\022\n\nerror_code\030\002 \002(\r\022\023"
  "\n\013opaque_data\030\003 \001(\014\"2\n\021WindowUpdateFrame"
  "\022\035\n\025window_size_increment\030\001 \002(\r\"f\n\021Conti"
  "nuationFrame\022)\n\013header_list\030\001 \003(\0132\024.h2pr"
  "oto.HeaderField\022\023\n\013end_headers\030\002 \002(\010\022\021\n\t"
  "stream_id\030\003 \002(\r"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_h2_5fframe_5fgrammar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_h2_5fframe_5fgrammar_2eproto = {
  false, false, 2015, descriptor_table_protodef_h2_5fframe_5fgrammar_2eproto, "h2_frame_grammar.proto", 
  &descriptor_table_h2_5fframe_5fgrammar_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_h2_5fframe_5fgrammar_2eproto::offsets,
  file_level_metadata_h2_5fframe_5fgrammar_2eproto, file_level_enum_descriptors_h2_5fframe_5fgrammar_2eproto, file_level_service_descriptors_h2_5fframe_5fgrammar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_h2_5fframe_5fgrammar_2eproto_getter() {
  return &descriptor_table_h2_5fframe_5fgrammar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_h2_5fframe_5fgrammar_2eproto(&descriptor_table_h2_5fframe_5fgrammar_2eproto);
namespace h2proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeaderField_Indexing_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_h2_5fframe_5fgrammar_2eproto);
  return file_level_enum_descriptors_h2_5fframe_5fgrammar_2eproto[0];
}
bool HeaderField_Indexing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HeaderField_Indexing HeaderField::INCREMENTAL;
constexpr HeaderField_Indexing HeaderField::WITHOUT_INDEX;
constexpr HeaderField_Indexing HeaderField::NEVER_INDEXED;
constexpr HeaderField_Indexing HeaderField::Indexing_MIN;
constexpr HeaderField_Indexing HeaderField::Indexing_MAX;
constexpr int HeaderField::Indexing_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Frame::_Internal {
 public:
  static const ::h2proto::DataFrame& data_frame(const Frame* msg);
  static const ::h2proto::HeadersFrame& headers_frame(const Frame* msg);
  static const ::h2proto::PriorityFrame& priority_frame(const Frame* msg);
  static const ::h2proto::RstStreamFrame& rst_stream_frame(const Frame* msg);
  static const ::h2proto::SettingsFrame& settings_frame(const Frame* msg);
  static const ::h2proto::PushPromiseFrame& push_promise_frame(const Frame* msg);
  static const ::h2proto::PingFrame& ping_frame(const Frame* msg);
  static const ::h2proto::GoawayFrame& goaway_frame(const Frame* msg);
  static const ::h2proto::WindowUpdateFrame& window_update_frame(const Frame* msg);
  static const ::h2proto::ContinuationFrame& continuation_frame(const Frame* msg);
};

const ::h2proto::DataFrame&
Frame::_Internal::data_frame(const Frame* msg) {
  return *msg->frame_oneof_.data_frame_;
}
const ::h2proto::HeadersFrame&
Frame::_Internal::headers_frame(const Frame* msg) {
  return *msg->frame_oneof_.headers_frame_;
}
const ::h2proto::PriorityFrame&
Frame::_Internal::priority_frame(const Frame* msg) {
  return *msg->frame_oneof_.priority_frame_;
}
const ::h2proto::RstStreamFrame&
Frame::_Internal::rst_stream_frame(const Frame* msg) {
  return *msg->frame_oneof_.rst_stream_frame_;
}
const ::h2proto::SettingsFrame&
Frame::_Internal::settings_frame(const Frame* msg) {
  return *msg->frame_oneof_.settings_frame_;
}
const ::h2proto::PushPromiseFrame&
Frame::_Internal::push_promise_frame(const Frame* msg) {
  return *msg->frame_oneof_.push_promise_frame_;
}
const ::h2proto::PingFrame&
Frame::_Internal::ping_frame(const Frame* msg) {
  return *msg->frame_oneof_.ping_frame_;
}
const ::h2proto::GoawayFrame&
Frame::_Internal::goaway_frame(const Frame* msg) {
  return *msg->frame_oneof_.goaway_frame_;
}
const ::h2proto::WindowUpdateFrame&
Frame::_Internal::window_update_frame(const Frame* msg) {
  return *msg->frame_oneof_.window_update_frame_;
}
const ::h2proto::ContinuationFrame&
Frame::_Internal::continuation_frame(const Frame* msg) {
  return *msg->frame_oneof_.continuation_frame_;
}
void Frame::set_allocated_data_frame(::h2proto::DataFrame* data_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (data_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::DataFrame>::GetOwningArena(data_frame);
    if (message_arena != submessage_arena) {
      data_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_frame, submessage_arena);
    }
    set_has_data_frame();
    frame_oneof_.data_frame_ = data_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.data_frame)
}
void Frame::set_allocated_headers_frame(::h2proto::HeadersFrame* headers_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (headers_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::HeadersFrame>::GetOwningArena(headers_frame);
    if (message_arena != submessage_arena) {
      headers_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headers_frame, submessage_arena);
    }
    set_has_headers_frame();
    frame_oneof_.headers_frame_ = headers_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.headers_frame)
}
void Frame::set_allocated_priority_frame(::h2proto::PriorityFrame* priority_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (priority_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::PriorityFrame>::GetOwningArena(priority_frame);
    if (message_arena != submessage_arena) {
      priority_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_frame, submessage_arena);
    }
    set_has_priority_frame();
    frame_oneof_.priority_frame_ = priority_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.priority_frame)
}
void Frame::set_allocated_rst_stream_frame(::h2proto::RstStreamFrame* rst_stream_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (rst_stream_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::RstStreamFrame>::GetOwningArena(rst_stream_frame);
    if (message_arena != submessage_arena) {
      rst_stream_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rst_stream_frame, submessage_arena);
    }
    set_has_rst_stream_frame();
    frame_oneof_.rst_stream_frame_ = rst_stream_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.rst_stream_frame)
}
void Frame::set_allocated_settings_frame(::h2proto::SettingsFrame* settings_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (settings_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::SettingsFrame>::GetOwningArena(settings_frame);
    if (message_arena != submessage_arena) {
      settings_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_frame, submessage_arena);
    }
    set_has_settings_frame();
    frame_oneof_.settings_frame_ = settings_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.settings_frame)
}
void Frame::set_allocated_push_promise_frame(::h2proto::PushPromiseFrame* push_promise_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (push_promise_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::PushPromiseFrame>::GetOwningArena(push_promise_frame);
    if (message_arena != submessage_arena) {
      push_promise_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_promise_frame, submessage_arena);
    }
    set_has_push_promise_frame();
    frame_oneof_.push_promise_frame_ = push_promise_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.push_promise_frame)
}
void Frame::set_allocated_ping_frame(::h2proto::PingFrame* ping_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (ping_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::PingFrame>::GetOwningArena(ping_frame);
    if (message_arena != submessage_arena) {
      ping_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_frame, submessage_arena);
    }
    set_has_ping_frame();
    frame_oneof_.ping_frame_ = ping_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.ping_frame)
}
void Frame::set_allocated_goaway_frame(::h2proto::GoawayFrame* goaway_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (goaway_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::GoawayFrame>::GetOwningArena(goaway_frame);
    if (message_arena != submessage_arena) {
      goaway_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goaway_frame, submessage_arena);
    }
    set_has_goaway_frame();
    frame_oneof_.goaway_frame_ = goaway_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.goaway_frame)
}
void Frame::set_allocated_window_update_frame(::h2proto::WindowUpdateFrame* window_update_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (window_update_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::WindowUpdateFrame>::GetOwningArena(window_update_frame);
    if (message_arena != submessage_arena) {
      window_update_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_update_frame, submessage_arena);
    }
    set_has_window_update_frame();
    frame_oneof_.window_update_frame_ = window_update_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.window_update_frame)
}
void Frame::set_allocated_continuation_frame(::h2proto::ContinuationFrame* continuation_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_frame_oneof();
  if (continuation_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::ContinuationFrame>::GetOwningArena(continuation_frame);
    if (message_arena != submessage_arena) {
      continuation_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuation_frame, submessage_arena);
    }
    set_has_continuation_frame();
    frame_oneof_.continuation_frame_ = continuation_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:h2proto.Frame.continuation_frame)
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_frame_oneof();
  switch (from.frame_oneof_case()) {
    case kDataFrame: {
      _internal_mutable_data_frame()->::h2proto::DataFrame::MergeFrom(from._internal_data_frame());
      break;
    }
    case kHeadersFrame: {
      _internal_mutable_headers_frame()->::h2proto::HeadersFrame::MergeFrom(from._internal_headers_frame());
      break;
    }
    case kPriorityFrame: {
      _internal_mutable_priority_frame()->::h2proto::PriorityFrame::MergeFrom(from._internal_priority_frame());
      break;
    }
    case kRstStreamFrame: {
      _internal_mutable_rst_stream_frame()->::h2proto::RstStreamFrame::MergeFrom(from._internal_rst_stream_frame());
      break;
    }
    case kSettingsFrame: {
      _internal_mutable_settings_frame()->::h2proto::SettingsFrame::MergeFrom(from._internal_settings_frame());
      break;
    }
    case kPushPromiseFrame: {
      _internal_mutable_push_promise_frame()->::h2proto::PushPromiseFrame::MergeFrom(from._internal_push_promise_frame());
      break;
    }
    case kPingFrame: {
      _internal_mutable_ping_frame()->::h2proto::PingFrame::MergeFrom(from._internal_ping_frame());
      break;
    }
    case kGoawayFrame: {
      _internal_mutable_goaway_frame()->::h2proto::GoawayFrame::MergeFrom(from._internal_goaway_frame());
      break;
    }
    case kWindowUpdateFrame: {
      _internal_mutable_window_update_frame()->::h2proto::WindowUpdateFrame::MergeFrom(from._internal_window_update_frame());
      break;
    }
    case kContinuationFrame: {
      _internal_mutable_continuation_frame()->::h2proto::ContinuationFrame::MergeFrom(from._internal_continuation_frame());
      break;
    }
    case FRAME_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:h2proto.Frame)
}

inline void Frame::SharedCtor() {
clear_has_frame_oneof();
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:h2proto.Frame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_frame_oneof()) {
    clear_frame_oneof();
  }
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frame::clear_frame_oneof() {
// @@protoc_insertion_point(one_of_clear_start:h2proto.Frame)
  switch (frame_oneof_case()) {
    case kDataFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.data_frame_;
      }
      break;
    }
    case kHeadersFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.headers_frame_;
      }
      break;
    }
    case kPriorityFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.priority_frame_;
      }
      break;
    }
    case kRstStreamFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.rst_stream_frame_;
      }
      break;
    }
    case kSettingsFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.settings_frame_;
      }
      break;
    }
    case kPushPromiseFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.push_promise_frame_;
      }
      break;
    }
    case kPingFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.ping_frame_;
      }
      break;
    }
    case kGoawayFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.goaway_frame_;
      }
      break;
    }
    case kWindowUpdateFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.window_update_frame_;
      }
      break;
    }
    case kContinuationFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete frame_oneof_.continuation_frame_;
      }
      break;
    }
    case FRAME_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FRAME_ONEOF_NOT_SET;
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_frame_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .h2proto.DataFrame data_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.HeadersFrame headers_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.PriorityFrame priority_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.RstStreamFrame rst_stream_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rst_stream_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.SettingsFrame settings_frame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.PushPromiseFrame push_promise_frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_promise_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.PingFrame ping_frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.GoawayFrame goaway_frame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_goaway_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.WindowUpdateFrame window_update_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_update_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .h2proto.ContinuationFrame continuation_frame = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuation_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (frame_oneof_case()) {
    case kDataFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::data_frame(this), target, stream);
      break;
    }
    case kHeadersFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::headers_frame(this), target, stream);
      break;
    }
    case kPriorityFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::priority_frame(this), target, stream);
      break;
    }
    case kRstStreamFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::rst_stream_frame(this), target, stream);
      break;
    }
    case kSettingsFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::settings_frame(this), target, stream);
      break;
    }
    case kPushPromiseFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::push_promise_frame(this), target, stream);
      break;
    }
    case kPingFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::ping_frame(this), target, stream);
      break;
    }
    case kGoawayFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::goaway_frame(this), target, stream);
      break;
    }
    case kWindowUpdateFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::window_update_frame(this), target, stream);
      break;
    }
    case kContinuationFrame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::continuation_frame(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (frame_oneof_case()) {
    // .h2proto.DataFrame data_frame = 1;
    case kDataFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.data_frame_);
      break;
    }
    // .h2proto.HeadersFrame headers_frame = 2;
    case kHeadersFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.headers_frame_);
      break;
    }
    // .h2proto.PriorityFrame priority_frame = 3;
    case kPriorityFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.priority_frame_);
      break;
    }
    // .h2proto.RstStreamFrame rst_stream_frame = 4;
    case kRstStreamFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.rst_stream_frame_);
      break;
    }
    // .h2proto.SettingsFrame settings_frame = 5;
    case kSettingsFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.settings_frame_);
      break;
    }
    // .h2proto.PushPromiseFrame push_promise_frame = 6;
    case kPushPromiseFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.push_promise_frame_);
      break;
    }
    // .h2proto.PingFrame ping_frame = 7;
    case kPingFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.ping_frame_);
      break;
    }
    // .h2proto.GoawayFrame goaway_frame = 8;
    case kGoawayFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.goaway_frame_);
      break;
    }
    // .h2proto.WindowUpdateFrame window_update_frame = 9;
    case kWindowUpdateFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.window_update_frame_);
      break;
    }
    // .h2proto.ContinuationFrame continuation_frame = 10;
    case kContinuationFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_oneof_.continuation_frame_);
      break;
    }
    case FRAME_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }

void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Frame *>(to)->MergeFrom(
      static_cast<const Frame &>(from));
}


void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.frame_oneof_case()) {
    case kDataFrame: {
      _internal_mutable_data_frame()->::h2proto::DataFrame::MergeFrom(from._internal_data_frame());
      break;
    }
    case kHeadersFrame: {
      _internal_mutable_headers_frame()->::h2proto::HeadersFrame::MergeFrom(from._internal_headers_frame());
      break;
    }
    case kPriorityFrame: {
      _internal_mutable_priority_frame()->::h2proto::PriorityFrame::MergeFrom(from._internal_priority_frame());
      break;
    }
    case kRstStreamFrame: {
      _internal_mutable_rst_stream_frame()->::h2proto::RstStreamFrame::MergeFrom(from._internal_rst_stream_frame());
      break;
    }
    case kSettingsFrame: {
      _internal_mutable_settings_frame()->::h2proto::SettingsFrame::MergeFrom(from._internal_settings_frame());
      break;
    }
    case kPushPromiseFrame: {
      _internal_mutable_push_promise_frame()->::h2proto::PushPromiseFrame::MergeFrom(from._internal_push_promise_frame());
      break;
    }
    case kPingFrame: {
      _internal_mutable_ping_frame()->::h2proto::PingFrame::MergeFrom(from._internal_ping_frame());
      break;
    }
    case kGoawayFrame: {
      _internal_mutable_goaway_frame()->::h2proto::GoawayFrame::MergeFrom(from._internal_goaway_frame());
      break;
    }
    case kWindowUpdateFrame: {
      _internal_mutable_window_update_frame()->::h2proto::WindowUpdateFrame::MergeFrom(from._internal_window_update_frame());
      break;
    }
    case kContinuationFrame: {
      _internal_mutable_continuation_frame()->::h2proto::ContinuationFrame::MergeFrom(from._internal_continuation_frame());
      break;
    }
    case FRAME_ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  switch (frame_oneof_case()) {
    case kDataFrame: {
      if (has_data_frame()) {
        if (!this->data_frame().IsInitialized()) return false;
      }
      break;
    }
    case kHeadersFrame: {
      if (has_headers_frame()) {
        if (!this->headers_frame().IsInitialized()) return false;
      }
      break;
    }
    case kPriorityFrame: {
      if (has_priority_frame()) {
        if (!this->priority_frame().IsInitialized()) return false;
      }
      break;
    }
    case kRstStreamFrame: {
      if (has_rst_stream_frame()) {
        if (!this->rst_stream_frame().IsInitialized()) return false;
      }
      break;
    }
    case kSettingsFrame: {
      if (has_settings_frame()) {
        if (!this->settings_frame().IsInitialized()) return false;
      }
      break;
    }
    case kPushPromiseFrame: {
      if (has_push_promise_frame()) {
        if (!this->push_promise_frame().IsInitialized()) return false;
      }
      break;
    }
    case kPingFrame: {
      if (has_ping_frame()) {
        if (!this->ping_frame().IsInitialized()) return false;
      }
      break;
    }
    case kGoawayFrame: {
      if (has_goaway_frame()) {
        if (!this->goaway_frame().IsInitialized()) return false;
      }
      break;
    }
    case kWindowUpdateFrame: {
      if (has_window_update_frame()) {
        if (!this->window_update_frame().IsInitialized()) return false;
      }
      break;
    }
    case kContinuationFrame: {
      if (has_continuation_frame()) {
        if (!this->continuation_frame().IsInitialized()) return false;
      }
      break;
    }
    case FRAME_ONEOF_NOT_SET: {
      break;
    }
  }
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(frame_oneof_, other->frame_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[0]);
}

// ===================================================================

class DataFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<DataFrame>()._has_bits_);
  static void set_has_pad_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

DataFrame::DataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.DataFrame)
}
DataFrame::DataFrame(const DataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pad_length_, &from.pad_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:h2proto.DataFrame)
}

inline void DataFrame::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pad_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
}

DataFrame::~DataFrame() {
  // @@protoc_insertion_point(destructor:h2proto.DataFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataFrame::ArenaDtor(void* object) {
  DataFrame* _this = reinterpret_cast< DataFrame* >(object);
  (void)_this;
}
void DataFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.DataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&pad_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pad_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pad_length(&has_bits);
          pad_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool end_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_stream(&has_bits);
          end_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.DataFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pad_length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pad_length(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // required bool end_stream = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_end_stream(), target);
  }

  // required uint32 stream_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.DataFrame)
  return target;
}

size_t DataFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.DataFrame)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_end_stream()) {
    // required bool end_stream = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_id()) {
    // required uint32 stream_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  return total_size;
}
size_t DataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.DataFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required bool end_stream = 3;
    total_size += 1 + 1;

    // required uint32 stream_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pad_length = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pad_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFrame::GetClassData() const { return &_class_data_; }

void DataFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DataFrame *>(to)->MergeFrom(
      static_cast<const DataFrame &>(from));
}


void DataFrame::MergeFrom(const DataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.DataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      pad_length_ = from.pad_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_stream_ = from.end_stream_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFrame::CopyFrom(const DataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.DataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataFrame::InternalSwap(DataFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataFrame, stream_id_)
      + sizeof(DataFrame::stream_id_)
      - PROTOBUF_FIELD_OFFSET(DataFrame, pad_length_)>(
          reinterpret_cast<char*>(&pad_length_),
          reinterpret_cast<char*>(&other->pad_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[1]);
}

// ===================================================================

class HPackInt::_Internal {
 public:
  using HasBits = decltype(std::declval<HPackInt>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msb_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

HPackInt::HPackInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.HPackInt)
}
HPackInt::HPackInt(const HPackInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&msb_mask_) -
    reinterpret_cast<char*>(&value_)) + sizeof(msb_mask_));
  // @@protoc_insertion_point(copy_constructor:h2proto.HPackInt)
}

inline void HPackInt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msb_mask_) -
    reinterpret_cast<char*>(&value_)) + sizeof(msb_mask_));
}

HPackInt::~HPackInt() {
  // @@protoc_insertion_point(destructor:h2proto.HPackInt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HPackInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HPackInt::ArenaDtor(void* object) {
  HPackInt* _this = reinterpret_cast< HPackInt* >(object);
  (void)_this;
}
void HPackInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HPackInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HPackInt::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.HPackInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msb_mask_) -
        reinterpret_cast<char*>(&value_)) + sizeof(msb_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HPackInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prefix(&has_bits);
          prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 msb_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_msb_mask(&has_bits);
          msb_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HPackInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.HPackInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // required uint32 prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefix(), target);
  }

  // required uint32 msb_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msb_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.HPackInt)
  return target;
}

size_t HPackInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.HPackInt)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required uint64 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (_internal_has_prefix()) {
    // required uint32 prefix = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix());
  }

  if (_internal_has_msb_mask()) {
    // required uint32 msb_mask = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msb_mask());
  }

  return total_size;
}
size_t HPackInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.HPackInt)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());

    // required uint32 prefix = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix());

    // required uint32 msb_mask = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msb_mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HPackInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HPackInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HPackInt::GetClassData() const { return &_class_data_; }

void HPackInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HPackInt *>(to)->MergeFrom(
      static_cast<const HPackInt &>(from));
}


void HPackInt::MergeFrom(const HPackInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.HPackInt)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      prefix_ = from.prefix_;
    }
    if (cached_has_bits & 0x00000004u) {
      msb_mask_ = from.msb_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HPackInt::CopyFrom(const HPackInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.HPackInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPackInt::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HPackInt::InternalSwap(HPackInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HPackInt, msb_mask_)
      + sizeof(HPackInt::msb_mask_)
      - PROTOBUF_FIELD_OFFSET(HPackInt, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HPackInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[2]);
}

// ===================================================================

class HPackString::_Internal {
 public:
  using HasBits = decltype(std::declval<HPackString>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_literal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_huffman(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

HPackString::HPackString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.HPackString)
}
HPackString::HPackString(const HPackString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&force_literal_, &from.force_literal_,
    static_cast<size_t>(reinterpret_cast<char*>(&huffman_) -
    reinterpret_cast<char*>(&force_literal_)) + sizeof(huffman_));
  // @@protoc_insertion_point(copy_constructor:h2proto.HPackString)
}

inline void HPackString::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&force_literal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&huffman_) -
    reinterpret_cast<char*>(&force_literal_)) + sizeof(huffman_));
}

HPackString::~HPackString() {
  // @@protoc_insertion_point(destructor:h2proto.HPackString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HPackString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HPackString::ArenaDtor(void* object) {
  HPackString* _this = reinterpret_cast< HPackString* >(object);
  (void)_this;
}
void HPackString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HPackString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HPackString::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.HPackString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  ::memset(&force_literal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&huffman_) -
      reinterpret_cast<char*>(&force_literal_)) + sizeof(huffman_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HPackString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool force_literal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_force_literal(&has_bits);
          force_literal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool huffman = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_huffman(&has_bits);
          huffman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HPackString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.HPackString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // required bool force_literal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_literal(), target);
  }

  // required bool huffman = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_huffman(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.HPackString)
  return target;
}

size_t HPackString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.HPackString)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_force_literal()) {
    // required bool force_literal = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_huffman()) {
    // required bool huffman = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t HPackString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.HPackString)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required bool force_literal = 2;
    total_size += 1 + 1;

    // required bool huffman = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HPackString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HPackString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HPackString::GetClassData() const { return &_class_data_; }

void HPackString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HPackString *>(to)->MergeFrom(
      static_cast<const HPackString &>(from));
}


void HPackString::MergeFrom(const HPackString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.HPackString)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      force_literal_ = from.force_literal_;
    }
    if (cached_has_bits & 0x00000004u) {
      huffman_ = from.huffman_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HPackString::CopyFrom(const HPackString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.HPackString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPackString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HPackString::InternalSwap(HPackString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HPackString, huffman_)
      + sizeof(HPackString::huffman_)
      - PROTOBUF_FIELD_OFFSET(HPackString, force_literal_)>(
          reinterpret_cast<char*>(&force_literal_),
          reinterpret_cast<char*>(&other->force_literal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HPackString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[3]);
}

// ===================================================================

class HeaderField::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderField>()._has_bits_);
  static const ::h2proto::HPackString& name(const HeaderField* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::h2proto::HPackString& value(const HeaderField* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_indexing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::h2proto::HPackString&
HeaderField::_Internal::name(const HeaderField* msg) {
  return *msg->name_;
}
const ::h2proto::HPackString&
HeaderField::_Internal::value(const HeaderField* msg) {
  return *msg->value_;
}
HeaderField::HeaderField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.HeaderField)
}
HeaderField::HeaderField(const HeaderField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_name()) {
    name_ = new ::h2proto::HPackString(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::h2proto::HPackString(*from.value_);
  } else {
    value_ = nullptr;
  }
  indexing_ = from.indexing_;
  // @@protoc_insertion_point(copy_constructor:h2proto.HeaderField)
}

inline void HeaderField::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&indexing_) -
    reinterpret_cast<char*>(&name_)) + sizeof(indexing_));
}

HeaderField::~HeaderField() {
  // @@protoc_insertion_point(destructor:h2proto.HeaderField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete value_;
}

void HeaderField::ArenaDtor(void* object) {
  HeaderField* _this = reinterpret_cast< HeaderField* >(object);
  (void)_this;
}
void HeaderField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderField::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.HeaderField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  indexing_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .h2proto.HPackString name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .h2proto.HPackString value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .h2proto.HeaderField.Indexing indexing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::h2proto::HeaderField_Indexing_IsValid(val))) {
            _internal_set_indexing(static_cast<::h2proto::HeaderField_Indexing>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.HeaderField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .h2proto.HPackString name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::name(this), target, stream);
  }

  // required .h2proto.HPackString value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // required .h2proto.HeaderField.Indexing indexing = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_indexing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.HeaderField)
  return target;
}

size_t HeaderField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.HeaderField)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required .h2proto.HPackString name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (_internal_has_value()) {
    // required .h2proto.HPackString value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (_internal_has_indexing()) {
    // required .h2proto.HeaderField.Indexing indexing = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_indexing());
  }

  return total_size;
}
size_t HeaderField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.HeaderField)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .h2proto.HPackString name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);

    // required .h2proto.HPackString value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

    // required .h2proto.HeaderField.Indexing indexing = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_indexing());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderField::GetClassData() const { return &_class_data_; }

void HeaderField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderField *>(to)->MergeFrom(
      static_cast<const HeaderField &>(from));
}


void HeaderField::MergeFrom(const HeaderField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.HeaderField)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_name()->::h2proto::HPackString::MergeFrom(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::h2proto::HPackString::MergeFrom(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      indexing_ = from.indexing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderField::CopyFrom(const HeaderField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.HeaderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_name()) {
    if (!name_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void HeaderField::InternalSwap(HeaderField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderField, indexing_)
      + sizeof(HeaderField::indexing_)
      - PROTOBUF_FIELD_OFFSET(HeaderField, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[4]);
}

// ===================================================================

class HeadersFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<HeadersFrame>()._has_bits_);
  static void set_has_pad_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stream_dependency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fe) ^ 0x000000fe) != 0;
  }
};

HeadersFrame::HeadersFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  header_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.HeadersFrame)
}
HeadersFrame::HeadersFrame(const HeadersFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      header_list_(from.header_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pad_length_, &from.pad_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:h2proto.HeadersFrame)
}

inline void HeadersFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pad_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
}

HeadersFrame::~HeadersFrame() {
  // @@protoc_insertion_point(destructor:h2proto.HeadersFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeadersFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeadersFrame::ArenaDtor(void* object) {
  HeadersFrame* _this = reinterpret_cast< HeadersFrame* >(object);
  (void)_this;
}
void HeadersFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadersFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadersFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.HeadersFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pad_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadersFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pad_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pad_length(&has_bits);
          pad_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool exclusive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exclusive(&has_bits);
          exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_dependency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_dependency(&has_bits);
          stream_dependency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .h2proto.HeaderField header_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool end_stream = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_end_stream(&has_bits);
          end_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool end_headers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_end_headers(&has_bits);
          end_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool priority = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadersFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.HeadersFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pad_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pad_length(), target);
  }

  // required bool exclusive = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_exclusive(), target);
  }

  // required uint32 stream_dependency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stream_dependency(), target);
  }

  // required uint32 weight = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_weight(), target);
  }

  // repeated .h2proto.HeaderField header_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_header_list(i), target, stream);
  }

  // required bool end_stream = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_end_stream(), target);
  }

  // required bool end_headers = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_end_headers(), target);
  }

  // required bool priority = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_priority(), target);
  }

  // required uint32 stream_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.HeadersFrame)
  return target;
}

size_t HeadersFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.HeadersFrame)
  size_t total_size = 0;

  if (_internal_has_stream_dependency()) {
    // required uint32 stream_dependency = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_dependency());
  }

  if (_internal_has_weight()) {
    // required uint32 weight = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());
  }

  if (_internal_has_exclusive()) {
    // required bool exclusive = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_end_stream()) {
    // required bool end_stream = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_end_headers()) {
    // required bool end_headers = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_priority()) {
    // required bool priority = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_id()) {
    // required uint32 stream_id = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  return total_size;
}
size_t HeadersFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.HeadersFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required uint32 stream_dependency = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_dependency());

    // required uint32 weight = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());

    // required bool exclusive = 2;
    total_size += 1 + 1;

    // required bool end_stream = 6;
    total_size += 1 + 1;

    // required bool end_headers = 7;
    total_size += 1 + 1;

    // required bool priority = 8;
    total_size += 1 + 1;

    // required uint32 stream_id = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .h2proto.HeaderField header_list = 5;
  total_size += 1UL * this->_internal_header_list_size();
  for (const auto& msg : this->header_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 pad_length = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pad_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadersFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeadersFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadersFrame::GetClassData() const { return &_class_data_; }

void HeadersFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeadersFrame *>(to)->MergeFrom(
      static_cast<const HeadersFrame &>(from));
}


void HeadersFrame::MergeFrom(const HeadersFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.HeadersFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  header_list_.MergeFrom(from.header_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pad_length_ = from.pad_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_dependency_ = from.stream_dependency_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      exclusive_ = from.exclusive_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_stream_ = from.end_stream_;
    }
    if (cached_has_bits & 0x00000020u) {
      end_headers_ = from.end_headers_;
    }
    if (cached_has_bits & 0x00000040u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000080u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadersFrame::CopyFrom(const HeadersFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.HeadersFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadersFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_list_)) return false;
  return true;
}

void HeadersFrame::InternalSwap(HeadersFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_list_.InternalSwap(&other->header_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadersFrame, stream_id_)
      + sizeof(HeadersFrame::stream_id_)
      - PROTOBUF_FIELD_OFFSET(HeadersFrame, pad_length_)>(
          reinterpret_cast<char*>(&pad_length_),
          reinterpret_cast<char*>(&other->pad_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadersFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[5]);
}

// ===================================================================

class PriorityFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<PriorityFrame>()._has_bits_);
  static void set_has_exclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_dependency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PriorityFrame::PriorityFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.PriorityFrame)
}
PriorityFrame::PriorityFrame(const PriorityFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&exclusive_, &from.exclusive_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&exclusive_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:h2proto.PriorityFrame)
}

inline void PriorityFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exclusive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&exclusive_)) + sizeof(stream_id_));
}

PriorityFrame::~PriorityFrame() {
  // @@protoc_insertion_point(destructor:h2proto.PriorityFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PriorityFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PriorityFrame::ArenaDtor(void* object) {
  PriorityFrame* _this = reinterpret_cast< PriorityFrame* >(object);
  (void)_this;
}
void PriorityFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriorityFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PriorityFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.PriorityFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&exclusive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&exclusive_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriorityFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool exclusive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_exclusive(&has_bits);
          exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_dependency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_dependency(&has_bits);
          stream_dependency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriorityFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.PriorityFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool exclusive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exclusive(), target);
  }

  // required uint32 stream_dependency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stream_dependency(), target);
  }

  // required uint32 weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_weight(), target);
  }

  // required uint32 stream_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.PriorityFrame)
  return target;
}

size_t PriorityFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.PriorityFrame)
  size_t total_size = 0;

  if (_internal_has_exclusive()) {
    // required bool exclusive = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_dependency()) {
    // required uint32 stream_dependency = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_dependency());
  }

  if (_internal_has_weight()) {
    // required uint32 weight = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());
  }

  if (_internal_has_stream_id()) {
    // required uint32 stream_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  return total_size;
}
size_t PriorityFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.PriorityFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool exclusive = 1;
    total_size += 1 + 1;

    // required uint32 stream_dependency = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_dependency());

    // required uint32 weight = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weight());

    // required uint32 stream_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriorityFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PriorityFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriorityFrame::GetClassData() const { return &_class_data_; }

void PriorityFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PriorityFrame *>(to)->MergeFrom(
      static_cast<const PriorityFrame &>(from));
}


void PriorityFrame::MergeFrom(const PriorityFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.PriorityFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      exclusive_ = from.exclusive_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_dependency_ = from.stream_dependency_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriorityFrame::CopyFrom(const PriorityFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.PriorityFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorityFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PriorityFrame::InternalSwap(PriorityFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriorityFrame, stream_id_)
      + sizeof(PriorityFrame::stream_id_)
      - PROTOBUF_FIELD_OFFSET(PriorityFrame, exclusive_)>(
          reinterpret_cast<char*>(&exclusive_),
          reinterpret_cast<char*>(&other->exclusive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriorityFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[6]);
}

// ===================================================================

class RstStreamFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<RstStreamFrame>()._has_bits_);
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RstStreamFrame::RstStreamFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.RstStreamFrame)
}
RstStreamFrame::RstStreamFrame(const RstStreamFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:h2proto.RstStreamFrame)
}

inline void RstStreamFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(stream_id_));
}

RstStreamFrame::~RstStreamFrame() {
  // @@protoc_insertion_point(destructor:h2proto.RstStreamFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RstStreamFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RstStreamFrame::ArenaDtor(void* object) {
  RstStreamFrame* _this = reinterpret_cast< RstStreamFrame* >(object);
  (void)_this;
}
void RstStreamFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RstStreamFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RstStreamFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.RstStreamFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&error_code_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RstStreamFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RstStreamFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.RstStreamFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  // required uint32 stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.RstStreamFrame)
  return target;
}

size_t RstStreamFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.RstStreamFrame)
  size_t total_size = 0;

  if (_internal_has_error_code()) {
    // required uint32 error_code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (_internal_has_stream_id()) {
    // required uint32 stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  return total_size;
}
size_t RstStreamFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.RstStreamFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 error_code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());

    // required uint32 stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RstStreamFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RstStreamFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RstStreamFrame::GetClassData() const { return &_class_data_; }

void RstStreamFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RstStreamFrame *>(to)->MergeFrom(
      static_cast<const RstStreamFrame &>(from));
}


void RstStreamFrame::MergeFrom(const RstStreamFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.RstStreamFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RstStreamFrame::CopyFrom(const RstStreamFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.RstStreamFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RstStreamFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RstStreamFrame::InternalSwap(RstStreamFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RstStreamFrame, stream_id_)
      + sizeof(RstStreamFrame::stream_id_)
      - PROTOBUF_FIELD_OFFSET(RstStreamFrame, error_code_)>(
          reinterpret_cast<char*>(&error_code_),
          reinterpret_cast<char*>(&other->error_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RstStreamFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[7]);
}

// ===================================================================

class SettingsFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SettingsFrame>()._has_bits_);
  static void set_has_header_table_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_push(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_concurrent_streams(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_header_list_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

SettingsFrame::SettingsFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.SettingsFrame)
}
SettingsFrame::SettingsFrame(const SettingsFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&header_table_size_, &from.header_table_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_header_list_size_) -
    reinterpret_cast<char*>(&header_table_size_)) + sizeof(max_header_list_size_));
  // @@protoc_insertion_point(copy_constructor:h2proto.SettingsFrame)
}

inline void SettingsFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_table_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_header_list_size_) -
    reinterpret_cast<char*>(&header_table_size_)) + sizeof(max_header_list_size_));
}

SettingsFrame::~SettingsFrame() {
  // @@protoc_insertion_point(destructor:h2proto.SettingsFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SettingsFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SettingsFrame::ArenaDtor(void* object) {
  SettingsFrame* _this = reinterpret_cast< SettingsFrame* >(object);
  (void)_this;
}
void SettingsFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SettingsFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SettingsFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.SettingsFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&header_table_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_header_list_size_) -
        reinterpret_cast<char*>(&header_table_size_)) + sizeof(max_header_list_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SettingsFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 header_table_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_header_table_size(&has_bits);
          header_table_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_push = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_push(&has_bits);
          enable_push_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_concurrent_streams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_concurrent_streams(&has_bits);
          max_concurrent_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_window_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_initial_window_size(&has_bits);
          initial_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_frame_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_frame_size(&has_bits);
          max_frame_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_header_list_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_header_list_size(&has_bits);
          max_header_list_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool ack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ack(&has_bits);
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingsFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.SettingsFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 header_table_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_header_table_size(), target);
  }

  // optional bool enable_push = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_push(), target);
  }

  // optional uint32 max_concurrent_streams = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_concurrent_streams(), target);
  }

  // optional uint32 initial_window_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_initial_window_size(), target);
  }

  // optional uint32 max_frame_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_frame_size(), target);
  }

  // optional uint32 max_header_list_size = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_header_list_size(), target);
  }

  // required bool ack = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.SettingsFrame)
  return target;
}

size_t SettingsFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.SettingsFrame)
  size_t total_size = 0;

  // required bool ack = 7;
  if (_internal_has_ack()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 header_table_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_header_table_size());
    }

    // optional uint32 max_concurrent_streams = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_concurrent_streams());
    }

    // optional uint32 initial_window_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_window_size());
    }

    // optional bool enable_push = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000060u) {
    // optional uint32 max_frame_size = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_frame_size());
    }

    // optional uint32 max_header_list_size = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_header_list_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SettingsFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SettingsFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SettingsFrame::GetClassData() const { return &_class_data_; }

void SettingsFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SettingsFrame *>(to)->MergeFrom(
      static_cast<const SettingsFrame &>(from));
}


void SettingsFrame::MergeFrom(const SettingsFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.SettingsFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      header_table_size_ = from.header_table_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_concurrent_streams_ = from.max_concurrent_streams_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_window_size_ = from.initial_window_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_push_ = from.enable_push_;
    }
    if (cached_has_bits & 0x00000010u) {
      ack_ = from.ack_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_frame_size_ = from.max_frame_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_header_list_size_ = from.max_header_list_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SettingsFrame::CopyFrom(const SettingsFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.SettingsFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SettingsFrame::InternalSwap(SettingsFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SettingsFrame, max_header_list_size_)
      + sizeof(SettingsFrame::max_header_list_size_)
      - PROTOBUF_FIELD_OFFSET(SettingsFrame, header_table_size_)>(
          reinterpret_cast<char*>(&header_table_size_),
          reinterpret_cast<char*>(&other->header_table_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[8]);
}

// ===================================================================

class PushPromiseFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<PushPromiseFrame>()._has_bits_);
  static void set_has_pad_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_promised_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

PushPromiseFrame::PushPromiseFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  header_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.PushPromiseFrame)
}
PushPromiseFrame::PushPromiseFrame(const PushPromiseFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      header_list_(from.header_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pad_length_, &from.pad_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:h2proto.PushPromiseFrame)
}

inline void PushPromiseFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pad_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
}

PushPromiseFrame::~PushPromiseFrame() {
  // @@protoc_insertion_point(destructor:h2proto.PushPromiseFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushPromiseFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PushPromiseFrame::ArenaDtor(void* object) {
  PushPromiseFrame* _this = reinterpret_cast< PushPromiseFrame* >(object);
  (void)_this;
}
void PushPromiseFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushPromiseFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushPromiseFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.PushPromiseFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pad_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&pad_length_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushPromiseFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pad_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pad_length(&has_bits);
          pad_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 promised_stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_promised_stream_id(&has_bits);
          promised_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .h2proto.HeaderField header_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool end_headers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_end_headers(&has_bits);
          end_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushPromiseFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.PushPromiseFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pad_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pad_length(), target);
  }

  // required uint32 promised_stream_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_promised_stream_id(), target);
  }

  // repeated .h2proto.HeaderField header_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_header_list(i), target, stream);
  }

  // required bool end_headers = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_end_headers(), target);
  }

  // required uint32 stream_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.PushPromiseFrame)
  return target;
}

size_t PushPromiseFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.PushPromiseFrame)
  size_t total_size = 0;

  if (_internal_has_promised_stream_id()) {
    // required uint32 promised_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_promised_stream_id());
  }

  if (_internal_has_end_headers()) {
    // required bool end_headers = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_id()) {
    // required uint32 stream_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  return total_size;
}
size_t PushPromiseFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.PushPromiseFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 promised_stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_promised_stream_id());

    // required bool end_headers = 4;
    total_size += 1 + 1;

    // required uint32 stream_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .h2proto.HeaderField header_list = 3;
  total_size += 1UL * this->_internal_header_list_size();
  for (const auto& msg : this->header_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 pad_length = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pad_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushPromiseFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushPromiseFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushPromiseFrame::GetClassData() const { return &_class_data_; }

void PushPromiseFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PushPromiseFrame *>(to)->MergeFrom(
      static_cast<const PushPromiseFrame &>(from));
}


void PushPromiseFrame::MergeFrom(const PushPromiseFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.PushPromiseFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  header_list_.MergeFrom(from.header_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pad_length_ = from.pad_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      promised_stream_id_ = from.promised_stream_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_headers_ = from.end_headers_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushPromiseFrame::CopyFrom(const PushPromiseFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.PushPromiseFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPromiseFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_list_)) return false;
  return true;
}

void PushPromiseFrame::InternalSwap(PushPromiseFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_list_.InternalSwap(&other->header_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushPromiseFrame, stream_id_)
      + sizeof(PushPromiseFrame::stream_id_)
      - PROTOBUF_FIELD_OFFSET(PushPromiseFrame, pad_length_)>(
          reinterpret_cast<char*>(&pad_length_),
          reinterpret_cast<char*>(&other->pad_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushPromiseFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[9]);
}

// ===================================================================

class PingFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<PingFrame>()._has_bits_);
  static void set_has_opaque_data_lo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opaque_data_hi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PingFrame::PingFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.PingFrame)
}
PingFrame::PingFrame(const PingFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&opaque_data_lo_, &from.opaque_data_lo_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&opaque_data_lo_)) + sizeof(ack_));
  // @@protoc_insertion_point(copy_constructor:h2proto.PingFrame)
}

inline void PingFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&opaque_data_lo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&opaque_data_lo_)) + sizeof(ack_));
}

PingFrame::~PingFrame() {
  // @@protoc_insertion_point(destructor:h2proto.PingFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PingFrame::ArenaDtor(void* object) {
  PingFrame* _this = reinterpret_cast< PingFrame* >(object);
  (void)_this;
}
void PingFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.PingFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&opaque_data_lo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ack_) -
        reinterpret_cast<char*>(&opaque_data_lo_)) + sizeof(ack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 opaque_data_lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_opaque_data_lo(&has_bits);
          opaque_data_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 opaque_data_hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opaque_data_hi(&has_bits);
          opaque_data_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ack(&has_bits);
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.PingFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 opaque_data_lo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_opaque_data_lo(), target);
  }

  // required uint32 opaque_data_hi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opaque_data_hi(), target);
  }

  // required bool ack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.PingFrame)
  return target;
}

size_t PingFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.PingFrame)
  size_t total_size = 0;

  if (_internal_has_opaque_data_lo()) {
    // required uint32 opaque_data_lo = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opaque_data_lo());
  }

  if (_internal_has_opaque_data_hi()) {
    // required uint32 opaque_data_hi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opaque_data_hi());
  }

  if (_internal_has_ack()) {
    // required bool ack = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PingFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.PingFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 opaque_data_lo = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opaque_data_lo());

    // required uint32 opaque_data_hi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opaque_data_hi());

    // required bool ack = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingFrame::GetClassData() const { return &_class_data_; }

void PingFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PingFrame *>(to)->MergeFrom(
      static_cast<const PingFrame &>(from));
}


void PingFrame::MergeFrom(const PingFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.PingFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      opaque_data_lo_ = from.opaque_data_lo_;
    }
    if (cached_has_bits & 0x00000002u) {
      opaque_data_hi_ = from.opaque_data_hi_;
    }
    if (cached_has_bits & 0x00000004u) {
      ack_ = from.ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingFrame::CopyFrom(const PingFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.PingFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PingFrame::InternalSwap(PingFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingFrame, ack_)
      + sizeof(PingFrame::ack_)
      - PROTOBUF_FIELD_OFFSET(PingFrame, opaque_data_lo_)>(
          reinterpret_cast<char*>(&opaque_data_lo_),
          reinterpret_cast<char*>(&other->opaque_data_lo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[10]);
}

// ===================================================================

class GoawayFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<GoawayFrame>()._has_bits_);
  static void set_has_last_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opaque_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

GoawayFrame::GoawayFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.GoawayFrame)
}
GoawayFrame::GoawayFrame(const GoawayFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opaque_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opaque_data()) {
    opaque_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opaque_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_stream_id_, &from.last_stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&last_stream_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:h2proto.GoawayFrame)
}

inline void GoawayFrame::SharedCtor() {
opaque_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_stream_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&last_stream_id_)) + sizeof(error_code_));
}

GoawayFrame::~GoawayFrame() {
  // @@protoc_insertion_point(destructor:h2proto.GoawayFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GoawayFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  opaque_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GoawayFrame::ArenaDtor(void* object) {
  GoawayFrame* _this = reinterpret_cast< GoawayFrame* >(object);
  (void)_this;
}
void GoawayFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoawayFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GoawayFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.GoawayFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opaque_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&last_stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&last_stream_id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoawayFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 last_stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_stream_id(&has_bits);
          last_stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes opaque_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_opaque_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoawayFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.GoawayFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 last_stream_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_stream_id(), target);
  }

  // required uint32 error_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_error_code(), target);
  }

  // optional bytes opaque_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_opaque_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.GoawayFrame)
  return target;
}

size_t GoawayFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.GoawayFrame)
  size_t total_size = 0;

  if (_internal_has_last_stream_id()) {
    // required uint32 last_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_stream_id());
  }

  if (_internal_has_error_code()) {
    // required uint32 error_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  return total_size;
}
size_t GoawayFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.GoawayFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 last_stream_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_stream_id());

    // required uint32 error_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes opaque_data = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoawayFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GoawayFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoawayFrame::GetClassData() const { return &_class_data_; }

void GoawayFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GoawayFrame *>(to)->MergeFrom(
      static_cast<const GoawayFrame &>(from));
}


void GoawayFrame::MergeFrom(const GoawayFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.GoawayFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opaque_data(from._internal_opaque_data());
    }
    if (cached_has_bits & 0x00000002u) {
      last_stream_id_ = from.last_stream_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoawayFrame::CopyFrom(const GoawayFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.GoawayFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoawayFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GoawayFrame::InternalSwap(GoawayFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opaque_data_, GetArenaForAllocation(),
      &other->opaque_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoawayFrame, error_code_)
      + sizeof(GoawayFrame::error_code_)
      - PROTOBUF_FIELD_OFFSET(GoawayFrame, last_stream_id_)>(
          reinterpret_cast<char*>(&last_stream_id_),
          reinterpret_cast<char*>(&other->last_stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GoawayFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[11]);
}

// ===================================================================

class WindowUpdateFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowUpdateFrame>()._has_bits_);
  static void set_has_window_size_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

WindowUpdateFrame::WindowUpdateFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.WindowUpdateFrame)
}
WindowUpdateFrame::WindowUpdateFrame(const WindowUpdateFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  window_size_increment_ = from.window_size_increment_;
  // @@protoc_insertion_point(copy_constructor:h2proto.WindowUpdateFrame)
}

inline void WindowUpdateFrame::SharedCtor() {
window_size_increment_ = 0u;
}

WindowUpdateFrame::~WindowUpdateFrame() {
  // @@protoc_insertion_point(destructor:h2proto.WindowUpdateFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WindowUpdateFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WindowUpdateFrame::ArenaDtor(void* object) {
  WindowUpdateFrame* _this = reinterpret_cast< WindowUpdateFrame* >(object);
  (void)_this;
}
void WindowUpdateFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowUpdateFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WindowUpdateFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.WindowUpdateFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  window_size_increment_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowUpdateFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 window_size_increment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_window_size_increment(&has_bits);
          window_size_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowUpdateFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.WindowUpdateFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 window_size_increment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_window_size_increment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.WindowUpdateFrame)
  return target;
}

size_t WindowUpdateFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.WindowUpdateFrame)
  size_t total_size = 0;

  // required uint32 window_size_increment = 1;
  if (_internal_has_window_size_increment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_window_size_increment());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WindowUpdateFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WindowUpdateFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WindowUpdateFrame::GetClassData() const { return &_class_data_; }

void WindowUpdateFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WindowUpdateFrame *>(to)->MergeFrom(
      static_cast<const WindowUpdateFrame &>(from));
}


void WindowUpdateFrame::MergeFrom(const WindowUpdateFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.WindowUpdateFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_window_size_increment()) {
    _internal_set_window_size_increment(from._internal_window_size_increment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WindowUpdateFrame::CopyFrom(const WindowUpdateFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.WindowUpdateFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowUpdateFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void WindowUpdateFrame::InternalSwap(WindowUpdateFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(window_size_increment_, other->window_size_increment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowUpdateFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[12]);
}

// ===================================================================

class ContinuationFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<ContinuationFrame>()._has_bits_);
  static void set_has_end_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ContinuationFrame::ContinuationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  header_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:h2proto.ContinuationFrame)
}
ContinuationFrame::ContinuationFrame(const ContinuationFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      header_list_(from.header_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&end_headers_, &from.end_headers_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&end_headers_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:h2proto.ContinuationFrame)
}

inline void ContinuationFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&end_headers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&end_headers_)) + sizeof(stream_id_));
}

ContinuationFrame::~ContinuationFrame() {
  // @@protoc_insertion_point(destructor:h2proto.ContinuationFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContinuationFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContinuationFrame::ArenaDtor(void* object) {
  ContinuationFrame* _this = reinterpret_cast< ContinuationFrame* >(object);
  (void)_this;
}
void ContinuationFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContinuationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContinuationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:h2proto.ContinuationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&end_headers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&end_headers_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinuationFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .h2proto.HeaderField header_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool end_headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_headers(&has_bits);
          end_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stream_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContinuationFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2proto.ContinuationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .h2proto.HeaderField header_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_header_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_header_list(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required bool end_headers = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_end_headers(), target);
  }

  // required uint32 stream_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stream_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2proto.ContinuationFrame)
  return target;
}

size_t ContinuationFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:h2proto.ContinuationFrame)
  size_t total_size = 0;

  if (_internal_has_end_headers()) {
    // required bool end_headers = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_id()) {
    // required uint32 stream_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());
  }

  return total_size;
}
size_t ContinuationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:h2proto.ContinuationFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool end_headers = 2;
    total_size += 1 + 1;

    // required uint32 stream_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stream_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .h2proto.HeaderField header_list = 1;
  total_size += 1UL * this->_internal_header_list_size();
  for (const auto& msg : this->header_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinuationFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContinuationFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinuationFrame::GetClassData() const { return &_class_data_; }

void ContinuationFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ContinuationFrame *>(to)->MergeFrom(
      static_cast<const ContinuationFrame &>(from));
}


void ContinuationFrame::MergeFrom(const ContinuationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:h2proto.ContinuationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  header_list_.MergeFrom(from.header_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      end_headers_ = from.end_headers_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContinuationFrame::CopyFrom(const ContinuationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:h2proto.ContinuationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuationFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(header_list_)) return false;
  return true;
}

void ContinuationFrame::InternalSwap(ContinuationFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_list_.InternalSwap(&other->header_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContinuationFrame, stream_id_)
      + sizeof(ContinuationFrame::stream_id_)
      - PROTOBUF_FIELD_OFFSET(ContinuationFrame, end_headers_)>(
          reinterpret_cast<char*>(&end_headers_),
          reinterpret_cast<char*>(&other->end_headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinuationFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_h2_5fframe_5fgrammar_2eproto_getter, &descriptor_table_h2_5fframe_5fgrammar_2eproto_once,
      file_level_metadata_h2_5fframe_5fgrammar_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace h2proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::h2proto::Frame* Arena::CreateMaybeMessage< ::h2proto::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::DataFrame* Arena::CreateMaybeMessage< ::h2proto::DataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::DataFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::HPackInt* Arena::CreateMaybeMessage< ::h2proto::HPackInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::HPackInt >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::HPackString* Arena::CreateMaybeMessage< ::h2proto::HPackString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::HPackString >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::HeaderField* Arena::CreateMaybeMessage< ::h2proto::HeaderField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::HeaderField >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::HeadersFrame* Arena::CreateMaybeMessage< ::h2proto::HeadersFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::HeadersFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::PriorityFrame* Arena::CreateMaybeMessage< ::h2proto::PriorityFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::PriorityFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::RstStreamFrame* Arena::CreateMaybeMessage< ::h2proto::RstStreamFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::RstStreamFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::SettingsFrame* Arena::CreateMaybeMessage< ::h2proto::SettingsFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::SettingsFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::PushPromiseFrame* Arena::CreateMaybeMessage< ::h2proto::PushPromiseFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::PushPromiseFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::PingFrame* Arena::CreateMaybeMessage< ::h2proto::PingFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::PingFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::GoawayFrame* Arena::CreateMaybeMessage< ::h2proto::GoawayFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::GoawayFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::WindowUpdateFrame* Arena::CreateMaybeMessage< ::h2proto::WindowUpdateFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::WindowUpdateFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::h2proto::ContinuationFrame* Arena::CreateMaybeMessage< ::h2proto::ContinuationFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::h2proto::ContinuationFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
