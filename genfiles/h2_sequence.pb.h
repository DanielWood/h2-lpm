// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: h2_sequence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_h2_5fsequence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_h2_5fsequence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "h2_frame_grammar.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_h2_5fsequence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_h2_5fsequence_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_h2_5fsequence_2eproto;
namespace h2proto {
class Conversation;
struct ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class Exchange;
struct ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class Sequence;
struct SequenceDefaultTypeInternal;
extern SequenceDefaultTypeInternal _Sequence_default_instance_;
}  // namespace h2proto
PROTOBUF_NAMESPACE_OPEN
template<> ::h2proto::Conversation* Arena::CreateMaybeMessage<::h2proto::Conversation>(Arena*);
template<> ::h2proto::Exchange* Arena::CreateMaybeMessage<::h2proto::Exchange>(Arena*);
template<> ::h2proto::Sequence* Arena::CreateMaybeMessage<::h2proto::Sequence>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace h2proto {

// ===================================================================

class Sequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.Sequence) */ {
 public:
  inline Sequence() : Sequence(nullptr) {}
  ~Sequence() override;
  explicit constexpr Sequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sequence(const Sequence& from);
  Sequence(Sequence&& from) noexcept
    : Sequence() {
    *this = ::std::move(from);
  }

  inline Sequence& operator=(const Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sequence& operator=(Sequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sequence* internal_default_instance() {
    return reinterpret_cast<const Sequence*>(
               &_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sequence& a, Sequence& b) {
    a.Swap(&b);
  }
  inline void Swap(Sequence* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sequence* New() const final {
    return new Sequence();
  }

  Sequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sequence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.Sequence";
  }
  protected:
  explicit Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .h2proto.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::h2proto::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Frame >*
      mutable_frames();
  private:
  const ::h2proto::Frame& _internal_frames(int index) const;
  ::h2proto::Frame* _internal_add_frames();
  public:
  const ::h2proto::Frame& frames(int index) const;
  ::h2proto::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:h2proto.Sequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Frame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_h2_5fsequence_2eproto;
};
// -------------------------------------------------------------------

class Exchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.Exchange) */ {
 public:
  inline Exchange() : Exchange(nullptr) {}
  ~Exchange() override;
  explicit constexpr Exchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Exchange(const Exchange& from);
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exchange& operator=(Exchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(Exchange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return new Exchange();
  }

  Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Exchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Exchange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.Exchange";
  }
  protected:
  explicit Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestSequenceFieldNumber = 1,
    kResponseSequenceFieldNumber = 2,
  };
  // required .h2proto.Sequence request_sequence = 1;
  bool has_request_sequence() const;
  private:
  bool _internal_has_request_sequence() const;
  public:
  void clear_request_sequence();
  const ::h2proto::Sequence& request_sequence() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::Sequence* release_request_sequence();
  ::h2proto::Sequence* mutable_request_sequence();
  void set_allocated_request_sequence(::h2proto::Sequence* request_sequence);
  private:
  const ::h2proto::Sequence& _internal_request_sequence() const;
  ::h2proto::Sequence* _internal_mutable_request_sequence();
  public:
  void unsafe_arena_set_allocated_request_sequence(
      ::h2proto::Sequence* request_sequence);
  ::h2proto::Sequence* unsafe_arena_release_request_sequence();

  // required .h2proto.Sequence response_sequence = 2;
  bool has_response_sequence() const;
  private:
  bool _internal_has_response_sequence() const;
  public:
  void clear_response_sequence();
  const ::h2proto::Sequence& response_sequence() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::Sequence* release_response_sequence();
  ::h2proto::Sequence* mutable_response_sequence();
  void set_allocated_response_sequence(::h2proto::Sequence* response_sequence);
  private:
  const ::h2proto::Sequence& _internal_response_sequence() const;
  ::h2proto::Sequence* _internal_mutable_response_sequence();
  public:
  void unsafe_arena_set_allocated_response_sequence(
      ::h2proto::Sequence* response_sequence);
  ::h2proto::Sequence* unsafe_arena_release_response_sequence();

  // @@protoc_insertion_point(class_scope:h2proto.Exchange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::h2proto::Sequence* request_sequence_;
  ::h2proto::Sequence* response_sequence_;
  friend struct ::TableStruct_h2_5fsequence_2eproto;
};
// -------------------------------------------------------------------

class Conversation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.Conversation) */ {
 public:
  inline Conversation() : Conversation(nullptr) {}
  ~Conversation() override;
  explicit constexpr Conversation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Conversation(const Conversation& from);
  Conversation(Conversation&& from) noexcept
    : Conversation() {
    *this = ::std::move(from);
  }

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conversation& operator=(Conversation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Conversation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
               &_Conversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Conversation& a, Conversation& b) {
    a.Swap(&b);
  }
  inline void Swap(Conversation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conversation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conversation* New() const final {
    return new Conversation();
  }

  Conversation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conversation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Conversation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Conversation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conversation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.Conversation";
  }
  protected:
  explicit Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangesFieldNumber = 1,
  };
  // repeated .h2proto.Exchange exchanges = 1;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;
  public:
  void clear_exchanges();
  ::h2proto::Exchange* mutable_exchanges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Exchange >*
      mutable_exchanges();
  private:
  const ::h2proto::Exchange& _internal_exchanges(int index) const;
  ::h2proto::Exchange* _internal_add_exchanges();
  public:
  const ::h2proto::Exchange& exchanges(int index) const;
  ::h2proto::Exchange* add_exchanges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Exchange >&
      exchanges() const;

  // @@protoc_insertion_point(class_scope:h2proto.Conversation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Exchange > exchanges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_h2_5fsequence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sequence

// repeated .h2proto.Frame frames = 1;
inline int Sequence::_internal_frames_size() const {
  return frames_.size();
}
inline int Sequence::frames_size() const {
  return _internal_frames_size();
}
inline ::h2proto::Frame* Sequence::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:h2proto.Sequence.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Frame >*
Sequence::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:h2proto.Sequence.frames)
  return &frames_;
}
inline const ::h2proto::Frame& Sequence::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::h2proto::Frame& Sequence::frames(int index) const {
  // @@protoc_insertion_point(field_get:h2proto.Sequence.frames)
  return _internal_frames(index);
}
inline ::h2proto::Frame* Sequence::_internal_add_frames() {
  return frames_.Add();
}
inline ::h2proto::Frame* Sequence::add_frames() {
  ::h2proto::Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:h2proto.Sequence.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Frame >&
Sequence::frames() const {
  // @@protoc_insertion_point(field_list:h2proto.Sequence.frames)
  return frames_;
}

// -------------------------------------------------------------------

// Exchange

// required .h2proto.Sequence request_sequence = 1;
inline bool Exchange::_internal_has_request_sequence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || request_sequence_ != nullptr);
  return value;
}
inline bool Exchange::has_request_sequence() const {
  return _internal_has_request_sequence();
}
inline void Exchange::clear_request_sequence() {
  if (request_sequence_ != nullptr) request_sequence_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::h2proto::Sequence& Exchange::_internal_request_sequence() const {
  const ::h2proto::Sequence* p = request_sequence_;
  return p != nullptr ? *p : reinterpret_cast<const ::h2proto::Sequence&>(
      ::h2proto::_Sequence_default_instance_);
}
inline const ::h2proto::Sequence& Exchange::request_sequence() const {
  // @@protoc_insertion_point(field_get:h2proto.Exchange.request_sequence)
  return _internal_request_sequence();
}
inline void Exchange::unsafe_arena_set_allocated_request_sequence(
    ::h2proto::Sequence* request_sequence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_sequence_);
  }
  request_sequence_ = request_sequence;
  if (request_sequence) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Exchange.request_sequence)
}
inline ::h2proto::Sequence* Exchange::release_request_sequence() {
  _has_bits_[0] &= ~0x00000001u;
  ::h2proto::Sequence* temp = request_sequence_;
  request_sequence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::h2proto::Sequence* Exchange::unsafe_arena_release_request_sequence() {
  // @@protoc_insertion_point(field_release:h2proto.Exchange.request_sequence)
  _has_bits_[0] &= ~0x00000001u;
  ::h2proto::Sequence* temp = request_sequence_;
  request_sequence_ = nullptr;
  return temp;
}
inline ::h2proto::Sequence* Exchange::_internal_mutable_request_sequence() {
  _has_bits_[0] |= 0x00000001u;
  if (request_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::h2proto::Sequence>(GetArenaForAllocation());
    request_sequence_ = p;
  }
  return request_sequence_;
}
inline ::h2proto::Sequence* Exchange::mutable_request_sequence() {
  ::h2proto::Sequence* _msg = _internal_mutable_request_sequence();
  // @@protoc_insertion_point(field_mutable:h2proto.Exchange.request_sequence)
  return _msg;
}
inline void Exchange::set_allocated_request_sequence(::h2proto::Sequence* request_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_sequence_;
  }
  if (request_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::Sequence>::GetOwningArena(request_sequence);
    if (message_arena != submessage_arena) {
      request_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_sequence, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_sequence_ = request_sequence;
  // @@protoc_insertion_point(field_set_allocated:h2proto.Exchange.request_sequence)
}

// required .h2proto.Sequence response_sequence = 2;
inline bool Exchange::_internal_has_response_sequence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || response_sequence_ != nullptr);
  return value;
}
inline bool Exchange::has_response_sequence() const {
  return _internal_has_response_sequence();
}
inline void Exchange::clear_response_sequence() {
  if (response_sequence_ != nullptr) response_sequence_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::h2proto::Sequence& Exchange::_internal_response_sequence() const {
  const ::h2proto::Sequence* p = response_sequence_;
  return p != nullptr ? *p : reinterpret_cast<const ::h2proto::Sequence&>(
      ::h2proto::_Sequence_default_instance_);
}
inline const ::h2proto::Sequence& Exchange::response_sequence() const {
  // @@protoc_insertion_point(field_get:h2proto.Exchange.response_sequence)
  return _internal_response_sequence();
}
inline void Exchange::unsafe_arena_set_allocated_response_sequence(
    ::h2proto::Sequence* response_sequence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_sequence_);
  }
  response_sequence_ = response_sequence;
  if (response_sequence) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Exchange.response_sequence)
}
inline ::h2proto::Sequence* Exchange::release_response_sequence() {
  _has_bits_[0] &= ~0x00000002u;
  ::h2proto::Sequence* temp = response_sequence_;
  response_sequence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::h2proto::Sequence* Exchange::unsafe_arena_release_response_sequence() {
  // @@protoc_insertion_point(field_release:h2proto.Exchange.response_sequence)
  _has_bits_[0] &= ~0x00000002u;
  ::h2proto::Sequence* temp = response_sequence_;
  response_sequence_ = nullptr;
  return temp;
}
inline ::h2proto::Sequence* Exchange::_internal_mutable_response_sequence() {
  _has_bits_[0] |= 0x00000002u;
  if (response_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::h2proto::Sequence>(GetArenaForAllocation());
    response_sequence_ = p;
  }
  return response_sequence_;
}
inline ::h2proto::Sequence* Exchange::mutable_response_sequence() {
  ::h2proto::Sequence* _msg = _internal_mutable_response_sequence();
  // @@protoc_insertion_point(field_mutable:h2proto.Exchange.response_sequence)
  return _msg;
}
inline void Exchange::set_allocated_response_sequence(::h2proto::Sequence* response_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_sequence_;
  }
  if (response_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::Sequence>::GetOwningArena(response_sequence);
    if (message_arena != submessage_arena) {
      response_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_sequence, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_sequence_ = response_sequence;
  // @@protoc_insertion_point(field_set_allocated:h2proto.Exchange.response_sequence)
}

// -------------------------------------------------------------------

// Conversation

// repeated .h2proto.Exchange exchanges = 1;
inline int Conversation::_internal_exchanges_size() const {
  return exchanges_.size();
}
inline int Conversation::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void Conversation::clear_exchanges() {
  exchanges_.Clear();
}
inline ::h2proto::Exchange* Conversation::mutable_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:h2proto.Conversation.exchanges)
  return exchanges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Exchange >*
Conversation::mutable_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:h2proto.Conversation.exchanges)
  return &exchanges_;
}
inline const ::h2proto::Exchange& Conversation::_internal_exchanges(int index) const {
  return exchanges_.Get(index);
}
inline const ::h2proto::Exchange& Conversation::exchanges(int index) const {
  // @@protoc_insertion_point(field_get:h2proto.Conversation.exchanges)
  return _internal_exchanges(index);
}
inline ::h2proto::Exchange* Conversation::_internal_add_exchanges() {
  return exchanges_.Add();
}
inline ::h2proto::Exchange* Conversation::add_exchanges() {
  ::h2proto::Exchange* _add = _internal_add_exchanges();
  // @@protoc_insertion_point(field_add:h2proto.Conversation.exchanges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::Exchange >&
Conversation::exchanges() const {
  // @@protoc_insertion_point(field_list:h2proto.Conversation.exchanges)
  return exchanges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace h2proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_h2_5fsequence_2eproto
