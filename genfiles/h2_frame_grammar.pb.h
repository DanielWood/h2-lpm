// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: h2_frame_grammar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_h2_5fframe_5fgrammar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_h2_5fframe_5fgrammar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_h2_5fframe_5fgrammar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_h2_5fframe_5fgrammar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_h2_5fframe_5fgrammar_2eproto;
namespace h2proto {
class ContinuationFrame;
struct ContinuationFrameDefaultTypeInternal;
extern ContinuationFrameDefaultTypeInternal _ContinuationFrame_default_instance_;
class DataFrame;
struct DataFrameDefaultTypeInternal;
extern DataFrameDefaultTypeInternal _DataFrame_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GoawayFrame;
struct GoawayFrameDefaultTypeInternal;
extern GoawayFrameDefaultTypeInternal _GoawayFrame_default_instance_;
class HPackInt;
struct HPackIntDefaultTypeInternal;
extern HPackIntDefaultTypeInternal _HPackInt_default_instance_;
class HPackString;
struct HPackStringDefaultTypeInternal;
extern HPackStringDefaultTypeInternal _HPackString_default_instance_;
class HeaderField;
struct HeaderFieldDefaultTypeInternal;
extern HeaderFieldDefaultTypeInternal _HeaderField_default_instance_;
class HeadersFrame;
struct HeadersFrameDefaultTypeInternal;
extern HeadersFrameDefaultTypeInternal _HeadersFrame_default_instance_;
class PingFrame;
struct PingFrameDefaultTypeInternal;
extern PingFrameDefaultTypeInternal _PingFrame_default_instance_;
class PriorityFrame;
struct PriorityFrameDefaultTypeInternal;
extern PriorityFrameDefaultTypeInternal _PriorityFrame_default_instance_;
class PushPromiseFrame;
struct PushPromiseFrameDefaultTypeInternal;
extern PushPromiseFrameDefaultTypeInternal _PushPromiseFrame_default_instance_;
class RstStreamFrame;
struct RstStreamFrameDefaultTypeInternal;
extern RstStreamFrameDefaultTypeInternal _RstStreamFrame_default_instance_;
class SettingsFrame;
struct SettingsFrameDefaultTypeInternal;
extern SettingsFrameDefaultTypeInternal _SettingsFrame_default_instance_;
class WindowUpdateFrame;
struct WindowUpdateFrameDefaultTypeInternal;
extern WindowUpdateFrameDefaultTypeInternal _WindowUpdateFrame_default_instance_;
}  // namespace h2proto
PROTOBUF_NAMESPACE_OPEN
template<> ::h2proto::ContinuationFrame* Arena::CreateMaybeMessage<::h2proto::ContinuationFrame>(Arena*);
template<> ::h2proto::DataFrame* Arena::CreateMaybeMessage<::h2proto::DataFrame>(Arena*);
template<> ::h2proto::Frame* Arena::CreateMaybeMessage<::h2proto::Frame>(Arena*);
template<> ::h2proto::GoawayFrame* Arena::CreateMaybeMessage<::h2proto::GoawayFrame>(Arena*);
template<> ::h2proto::HPackInt* Arena::CreateMaybeMessage<::h2proto::HPackInt>(Arena*);
template<> ::h2proto::HPackString* Arena::CreateMaybeMessage<::h2proto::HPackString>(Arena*);
template<> ::h2proto::HeaderField* Arena::CreateMaybeMessage<::h2proto::HeaderField>(Arena*);
template<> ::h2proto::HeadersFrame* Arena::CreateMaybeMessage<::h2proto::HeadersFrame>(Arena*);
template<> ::h2proto::PingFrame* Arena::CreateMaybeMessage<::h2proto::PingFrame>(Arena*);
template<> ::h2proto::PriorityFrame* Arena::CreateMaybeMessage<::h2proto::PriorityFrame>(Arena*);
template<> ::h2proto::PushPromiseFrame* Arena::CreateMaybeMessage<::h2proto::PushPromiseFrame>(Arena*);
template<> ::h2proto::RstStreamFrame* Arena::CreateMaybeMessage<::h2proto::RstStreamFrame>(Arena*);
template<> ::h2proto::SettingsFrame* Arena::CreateMaybeMessage<::h2proto::SettingsFrame>(Arena*);
template<> ::h2proto::WindowUpdateFrame* Arena::CreateMaybeMessage<::h2proto::WindowUpdateFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace h2proto {

enum HeaderField_Indexing : int {
  HeaderField_Indexing_INCREMENTAL = 0,
  HeaderField_Indexing_WITHOUT_INDEX = 1,
  HeaderField_Indexing_NEVER_INDEXED = 2
};
bool HeaderField_Indexing_IsValid(int value);
constexpr HeaderField_Indexing HeaderField_Indexing_Indexing_MIN = HeaderField_Indexing_INCREMENTAL;
constexpr HeaderField_Indexing HeaderField_Indexing_Indexing_MAX = HeaderField_Indexing_NEVER_INDEXED;
constexpr int HeaderField_Indexing_Indexing_ARRAYSIZE = HeaderField_Indexing_Indexing_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeaderField_Indexing_descriptor();
template<typename T>
inline const std::string& HeaderField_Indexing_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeaderField_Indexing>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeaderField_Indexing_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HeaderField_Indexing_descriptor(), enum_t_value);
}
inline bool HeaderField_Indexing_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeaderField_Indexing* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HeaderField_Indexing>(
    HeaderField_Indexing_descriptor(), name, value);
}
// ===================================================================

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  enum FrameOneofCase {
    kDataFrame = 1,
    kHeadersFrame = 2,
    kPriorityFrame = 3,
    kRstStreamFrame = 4,
    kSettingsFrame = 5,
    kPushPromiseFrame = 6,
    kPingFrame = 7,
    kGoawayFrame = 8,
    kWindowUpdateFrame = 9,
    kContinuationFrame = 10,
    FRAME_ONEOF_NOT_SET = 0,
  };

  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return new Frame();
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFrameFieldNumber = 1,
    kHeadersFrameFieldNumber = 2,
    kPriorityFrameFieldNumber = 3,
    kRstStreamFrameFieldNumber = 4,
    kSettingsFrameFieldNumber = 5,
    kPushPromiseFrameFieldNumber = 6,
    kPingFrameFieldNumber = 7,
    kGoawayFrameFieldNumber = 8,
    kWindowUpdateFrameFieldNumber = 9,
    kContinuationFrameFieldNumber = 10,
  };
  // .h2proto.DataFrame data_frame = 1;
  bool has_data_frame() const;
  private:
  bool _internal_has_data_frame() const;
  public:
  void clear_data_frame();
  const ::h2proto::DataFrame& data_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::DataFrame* release_data_frame();
  ::h2proto::DataFrame* mutable_data_frame();
  void set_allocated_data_frame(::h2proto::DataFrame* data_frame);
  private:
  const ::h2proto::DataFrame& _internal_data_frame() const;
  ::h2proto::DataFrame* _internal_mutable_data_frame();
  public:
  void unsafe_arena_set_allocated_data_frame(
      ::h2proto::DataFrame* data_frame);
  ::h2proto::DataFrame* unsafe_arena_release_data_frame();

  // .h2proto.HeadersFrame headers_frame = 2;
  bool has_headers_frame() const;
  private:
  bool _internal_has_headers_frame() const;
  public:
  void clear_headers_frame();
  const ::h2proto::HeadersFrame& headers_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::HeadersFrame* release_headers_frame();
  ::h2proto::HeadersFrame* mutable_headers_frame();
  void set_allocated_headers_frame(::h2proto::HeadersFrame* headers_frame);
  private:
  const ::h2proto::HeadersFrame& _internal_headers_frame() const;
  ::h2proto::HeadersFrame* _internal_mutable_headers_frame();
  public:
  void unsafe_arena_set_allocated_headers_frame(
      ::h2proto::HeadersFrame* headers_frame);
  ::h2proto::HeadersFrame* unsafe_arena_release_headers_frame();

  // .h2proto.PriorityFrame priority_frame = 3;
  bool has_priority_frame() const;
  private:
  bool _internal_has_priority_frame() const;
  public:
  void clear_priority_frame();
  const ::h2proto::PriorityFrame& priority_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::PriorityFrame* release_priority_frame();
  ::h2proto::PriorityFrame* mutable_priority_frame();
  void set_allocated_priority_frame(::h2proto::PriorityFrame* priority_frame);
  private:
  const ::h2proto::PriorityFrame& _internal_priority_frame() const;
  ::h2proto::PriorityFrame* _internal_mutable_priority_frame();
  public:
  void unsafe_arena_set_allocated_priority_frame(
      ::h2proto::PriorityFrame* priority_frame);
  ::h2proto::PriorityFrame* unsafe_arena_release_priority_frame();

  // .h2proto.RstStreamFrame rst_stream_frame = 4;
  bool has_rst_stream_frame() const;
  private:
  bool _internal_has_rst_stream_frame() const;
  public:
  void clear_rst_stream_frame();
  const ::h2proto::RstStreamFrame& rst_stream_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::RstStreamFrame* release_rst_stream_frame();
  ::h2proto::RstStreamFrame* mutable_rst_stream_frame();
  void set_allocated_rst_stream_frame(::h2proto::RstStreamFrame* rst_stream_frame);
  private:
  const ::h2proto::RstStreamFrame& _internal_rst_stream_frame() const;
  ::h2proto::RstStreamFrame* _internal_mutable_rst_stream_frame();
  public:
  void unsafe_arena_set_allocated_rst_stream_frame(
      ::h2proto::RstStreamFrame* rst_stream_frame);
  ::h2proto::RstStreamFrame* unsafe_arena_release_rst_stream_frame();

  // .h2proto.SettingsFrame settings_frame = 5;
  bool has_settings_frame() const;
  private:
  bool _internal_has_settings_frame() const;
  public:
  void clear_settings_frame();
  const ::h2proto::SettingsFrame& settings_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::SettingsFrame* release_settings_frame();
  ::h2proto::SettingsFrame* mutable_settings_frame();
  void set_allocated_settings_frame(::h2proto::SettingsFrame* settings_frame);
  private:
  const ::h2proto::SettingsFrame& _internal_settings_frame() const;
  ::h2proto::SettingsFrame* _internal_mutable_settings_frame();
  public:
  void unsafe_arena_set_allocated_settings_frame(
      ::h2proto::SettingsFrame* settings_frame);
  ::h2proto::SettingsFrame* unsafe_arena_release_settings_frame();

  // .h2proto.PushPromiseFrame push_promise_frame = 6;
  bool has_push_promise_frame() const;
  private:
  bool _internal_has_push_promise_frame() const;
  public:
  void clear_push_promise_frame();
  const ::h2proto::PushPromiseFrame& push_promise_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::PushPromiseFrame* release_push_promise_frame();
  ::h2proto::PushPromiseFrame* mutable_push_promise_frame();
  void set_allocated_push_promise_frame(::h2proto::PushPromiseFrame* push_promise_frame);
  private:
  const ::h2proto::PushPromiseFrame& _internal_push_promise_frame() const;
  ::h2proto::PushPromiseFrame* _internal_mutable_push_promise_frame();
  public:
  void unsafe_arena_set_allocated_push_promise_frame(
      ::h2proto::PushPromiseFrame* push_promise_frame);
  ::h2proto::PushPromiseFrame* unsafe_arena_release_push_promise_frame();

  // .h2proto.PingFrame ping_frame = 7;
  bool has_ping_frame() const;
  private:
  bool _internal_has_ping_frame() const;
  public:
  void clear_ping_frame();
  const ::h2proto::PingFrame& ping_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::PingFrame* release_ping_frame();
  ::h2proto::PingFrame* mutable_ping_frame();
  void set_allocated_ping_frame(::h2proto::PingFrame* ping_frame);
  private:
  const ::h2proto::PingFrame& _internal_ping_frame() const;
  ::h2proto::PingFrame* _internal_mutable_ping_frame();
  public:
  void unsafe_arena_set_allocated_ping_frame(
      ::h2proto::PingFrame* ping_frame);
  ::h2proto::PingFrame* unsafe_arena_release_ping_frame();

  // .h2proto.GoawayFrame goaway_frame = 8;
  bool has_goaway_frame() const;
  private:
  bool _internal_has_goaway_frame() const;
  public:
  void clear_goaway_frame();
  const ::h2proto::GoawayFrame& goaway_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::GoawayFrame* release_goaway_frame();
  ::h2proto::GoawayFrame* mutable_goaway_frame();
  void set_allocated_goaway_frame(::h2proto::GoawayFrame* goaway_frame);
  private:
  const ::h2proto::GoawayFrame& _internal_goaway_frame() const;
  ::h2proto::GoawayFrame* _internal_mutable_goaway_frame();
  public:
  void unsafe_arena_set_allocated_goaway_frame(
      ::h2proto::GoawayFrame* goaway_frame);
  ::h2proto::GoawayFrame* unsafe_arena_release_goaway_frame();

  // .h2proto.WindowUpdateFrame window_update_frame = 9;
  bool has_window_update_frame() const;
  private:
  bool _internal_has_window_update_frame() const;
  public:
  void clear_window_update_frame();
  const ::h2proto::WindowUpdateFrame& window_update_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::WindowUpdateFrame* release_window_update_frame();
  ::h2proto::WindowUpdateFrame* mutable_window_update_frame();
  void set_allocated_window_update_frame(::h2proto::WindowUpdateFrame* window_update_frame);
  private:
  const ::h2proto::WindowUpdateFrame& _internal_window_update_frame() const;
  ::h2proto::WindowUpdateFrame* _internal_mutable_window_update_frame();
  public:
  void unsafe_arena_set_allocated_window_update_frame(
      ::h2proto::WindowUpdateFrame* window_update_frame);
  ::h2proto::WindowUpdateFrame* unsafe_arena_release_window_update_frame();

  // .h2proto.ContinuationFrame continuation_frame = 10;
  bool has_continuation_frame() const;
  private:
  bool _internal_has_continuation_frame() const;
  public:
  void clear_continuation_frame();
  const ::h2proto::ContinuationFrame& continuation_frame() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::ContinuationFrame* release_continuation_frame();
  ::h2proto::ContinuationFrame* mutable_continuation_frame();
  void set_allocated_continuation_frame(::h2proto::ContinuationFrame* continuation_frame);
  private:
  const ::h2proto::ContinuationFrame& _internal_continuation_frame() const;
  ::h2proto::ContinuationFrame* _internal_mutable_continuation_frame();
  public:
  void unsafe_arena_set_allocated_continuation_frame(
      ::h2proto::ContinuationFrame* continuation_frame);
  ::h2proto::ContinuationFrame* unsafe_arena_release_continuation_frame();

  void clear_frame_oneof();
  FrameOneofCase frame_oneof_case() const;
  // @@protoc_insertion_point(class_scope:h2proto.Frame)
 private:
  class _Internal;
  void set_has_data_frame();
  void set_has_headers_frame();
  void set_has_priority_frame();
  void set_has_rst_stream_frame();
  void set_has_settings_frame();
  void set_has_push_promise_frame();
  void set_has_ping_frame();
  void set_has_goaway_frame();
  void set_has_window_update_frame();
  void set_has_continuation_frame();

  inline bool has_frame_oneof() const;
  inline void clear_has_frame_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FrameOneofUnion {
    constexpr FrameOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::h2proto::DataFrame* data_frame_;
    ::h2proto::HeadersFrame* headers_frame_;
    ::h2proto::PriorityFrame* priority_frame_;
    ::h2proto::RstStreamFrame* rst_stream_frame_;
    ::h2proto::SettingsFrame* settings_frame_;
    ::h2proto::PushPromiseFrame* push_promise_frame_;
    ::h2proto::PingFrame* ping_frame_;
    ::h2proto::GoawayFrame* goaway_frame_;
    ::h2proto::WindowUpdateFrame* window_update_frame_;
    ::h2proto::ContinuationFrame* continuation_frame_;
  } frame_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class DataFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.DataFrame) */ {
 public:
  inline DataFrame() : DataFrame(nullptr) {}
  ~DataFrame() override;
  explicit constexpr DataFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataFrame(const DataFrame& from);
  DataFrame(DataFrame&& from) noexcept
    : DataFrame() {
    *this = ::std::move(from);
  }

  inline DataFrame& operator=(const DataFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataFrame& operator=(DataFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataFrame* internal_default_instance() {
    return reinterpret_cast<const DataFrame*>(
               &_DataFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataFrame& a, DataFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(DataFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataFrame* New() const final {
    return new DataFrame();
  }

  DataFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.DataFrame";
  }
  protected:
  explicit DataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPadLengthFieldNumber = 1,
    kEndStreamFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // required bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 pad_length = 1;
  bool has_pad_length() const;
  private:
  bool _internal_has_pad_length() const;
  public:
  void clear_pad_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_length() const;
  void set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_length() const;
  void _internal_set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool end_stream = 3;
  bool has_end_stream() const;
  private:
  bool _internal_has_end_stream() const;
  public:
  void clear_end_stream();
  bool end_stream() const;
  void set_end_stream(bool value);
  private:
  bool _internal_end_stream() const;
  void _internal_set_end_stream(bool value);
  public:

  // required uint32 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.DataFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_length_;
  bool end_stream_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class HPackInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.HPackInt) */ {
 public:
  inline HPackInt() : HPackInt(nullptr) {}
  ~HPackInt() override;
  explicit constexpr HPackInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HPackInt(const HPackInt& from);
  HPackInt(HPackInt&& from) noexcept
    : HPackInt() {
    *this = ::std::move(from);
  }

  inline HPackInt& operator=(const HPackInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline HPackInt& operator=(HPackInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HPackInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const HPackInt* internal_default_instance() {
    return reinterpret_cast<const HPackInt*>(
               &_HPackInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HPackInt& a, HPackInt& b) {
    a.Swap(&b);
  }
  inline void Swap(HPackInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HPackInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HPackInt* New() const final {
    return new HPackInt();
  }

  HPackInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HPackInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HPackInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HPackInt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HPackInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.HPackInt";
  }
  protected:
  explicit HPackInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPrefixFieldNumber = 2,
    kMsbMaskFieldNumber = 3,
  };
  // required uint64 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 prefix = 2;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix() const;
  void set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix() const;
  void _internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 msb_mask = 3;
  bool has_msb_mask() const;
  private:
  bool _internal_has_msb_mask() const;
  public:
  void clear_msb_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 msb_mask() const;
  void set_msb_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msb_mask() const;
  void _internal_set_msb_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.HPackInt)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msb_mask_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class HPackString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.HPackString) */ {
 public:
  inline HPackString() : HPackString(nullptr) {}
  ~HPackString() override;
  explicit constexpr HPackString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HPackString(const HPackString& from);
  HPackString(HPackString&& from) noexcept
    : HPackString() {
    *this = ::std::move(from);
  }

  inline HPackString& operator=(const HPackString& from) {
    CopyFrom(from);
    return *this;
  }
  inline HPackString& operator=(HPackString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HPackString& default_instance() {
    return *internal_default_instance();
  }
  static inline const HPackString* internal_default_instance() {
    return reinterpret_cast<const HPackString*>(
               &_HPackString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HPackString& a, HPackString& b) {
    a.Swap(&b);
  }
  inline void Swap(HPackString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HPackString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HPackString* New() const final {
    return new HPackString();
  }

  HPackString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HPackString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HPackString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HPackString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HPackString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.HPackString";
  }
  protected:
  explicit HPackString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kForceLiteralFieldNumber = 2,
    kHuffmanFieldNumber = 3,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required bool force_literal = 2;
  bool has_force_literal() const;
  private:
  bool _internal_has_force_literal() const;
  public:
  void clear_force_literal();
  bool force_literal() const;
  void set_force_literal(bool value);
  private:
  bool _internal_force_literal() const;
  void _internal_set_force_literal(bool value);
  public:

  // required bool huffman = 3;
  bool has_huffman() const;
  private:
  bool _internal_has_huffman() const;
  public:
  void clear_huffman();
  bool huffman() const;
  void set_huffman(bool value);
  private:
  bool _internal_huffman() const;
  void _internal_set_huffman(bool value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.HPackString)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool force_literal_;
  bool huffman_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class HeaderField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.HeaderField) */ {
 public:
  inline HeaderField() : HeaderField(nullptr) {}
  ~HeaderField() override;
  explicit constexpr HeaderField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderField(const HeaderField& from);
  HeaderField(HeaderField&& from) noexcept
    : HeaderField() {
    *this = ::std::move(from);
  }

  inline HeaderField& operator=(const HeaderField& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderField& operator=(HeaderField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderField& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderField* internal_default_instance() {
    return reinterpret_cast<const HeaderField*>(
               &_HeaderField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HeaderField& a, HeaderField& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderField* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderField* New() const final {
    return new HeaderField();
  }

  HeaderField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeaderField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeaderField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.HeaderField";
  }
  protected:
  explicit HeaderField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeaderField_Indexing Indexing;
  static constexpr Indexing INCREMENTAL =
    HeaderField_Indexing_INCREMENTAL;
  static constexpr Indexing WITHOUT_INDEX =
    HeaderField_Indexing_WITHOUT_INDEX;
  static constexpr Indexing NEVER_INDEXED =
    HeaderField_Indexing_NEVER_INDEXED;
  static inline bool Indexing_IsValid(int value) {
    return HeaderField_Indexing_IsValid(value);
  }
  static constexpr Indexing Indexing_MIN =
    HeaderField_Indexing_Indexing_MIN;
  static constexpr Indexing Indexing_MAX =
    HeaderField_Indexing_Indexing_MAX;
  static constexpr int Indexing_ARRAYSIZE =
    HeaderField_Indexing_Indexing_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Indexing_descriptor() {
    return HeaderField_Indexing_descriptor();
  }
  template<typename T>
  static inline const std::string& Indexing_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Indexing>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Indexing_Name.");
    return HeaderField_Indexing_Name(enum_t_value);
  }
  static inline bool Indexing_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Indexing* value) {
    return HeaderField_Indexing_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kIndexingFieldNumber = 6,
  };
  // required .h2proto.HPackString name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::h2proto::HPackString& name() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::HPackString* release_name();
  ::h2proto::HPackString* mutable_name();
  void set_allocated_name(::h2proto::HPackString* name);
  private:
  const ::h2proto::HPackString& _internal_name() const;
  ::h2proto::HPackString* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::h2proto::HPackString* name);
  ::h2proto::HPackString* unsafe_arena_release_name();

  // required .h2proto.HPackString value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::h2proto::HPackString& value() const;
  PROTOBUF_MUST_USE_RESULT ::h2proto::HPackString* release_value();
  ::h2proto::HPackString* mutable_value();
  void set_allocated_value(::h2proto::HPackString* value);
  private:
  const ::h2proto::HPackString& _internal_value() const;
  ::h2proto::HPackString* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::h2proto::HPackString* value);
  ::h2proto::HPackString* unsafe_arena_release_value();

  // required .h2proto.HeaderField.Indexing indexing = 6;
  bool has_indexing() const;
  private:
  bool _internal_has_indexing() const;
  public:
  void clear_indexing();
  ::h2proto::HeaderField_Indexing indexing() const;
  void set_indexing(::h2proto::HeaderField_Indexing value);
  private:
  ::h2proto::HeaderField_Indexing _internal_indexing() const;
  void _internal_set_indexing(::h2proto::HeaderField_Indexing value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.HeaderField)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::h2proto::HPackString* name_;
  ::h2proto::HPackString* value_;
  int indexing_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class HeadersFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.HeadersFrame) */ {
 public:
  inline HeadersFrame() : HeadersFrame(nullptr) {}
  ~HeadersFrame() override;
  explicit constexpr HeadersFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeadersFrame(const HeadersFrame& from);
  HeadersFrame(HeadersFrame&& from) noexcept
    : HeadersFrame() {
    *this = ::std::move(from);
  }

  inline HeadersFrame& operator=(const HeadersFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeadersFrame& operator=(HeadersFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeadersFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeadersFrame* internal_default_instance() {
    return reinterpret_cast<const HeadersFrame*>(
               &_HeadersFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HeadersFrame& a, HeadersFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(HeadersFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeadersFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeadersFrame* New() const final {
    return new HeadersFrame();
  }

  HeadersFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeadersFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeadersFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeadersFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeadersFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.HeadersFrame";
  }
  protected:
  explicit HeadersFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderListFieldNumber = 5,
    kPadLengthFieldNumber = 1,
    kStreamDependencyFieldNumber = 3,
    kWeightFieldNumber = 4,
    kExclusiveFieldNumber = 2,
    kEndStreamFieldNumber = 6,
    kEndHeadersFieldNumber = 7,
    kPriorityFieldNumber = 8,
    kStreamIdFieldNumber = 9,
  };
  // repeated .h2proto.HeaderField header_list = 5;
  int header_list_size() const;
  private:
  int _internal_header_list_size() const;
  public:
  void clear_header_list();
  ::h2proto::HeaderField* mutable_header_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >*
      mutable_header_list();
  private:
  const ::h2proto::HeaderField& _internal_header_list(int index) const;
  ::h2proto::HeaderField* _internal_add_header_list();
  public:
  const ::h2proto::HeaderField& header_list(int index) const;
  ::h2proto::HeaderField* add_header_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >&
      header_list() const;

  // optional uint32 pad_length = 1;
  bool has_pad_length() const;
  private:
  bool _internal_has_pad_length() const;
  public:
  void clear_pad_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_length() const;
  void set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_length() const;
  void _internal_set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 stream_dependency = 3;
  bool has_stream_dependency() const;
  private:
  bool _internal_has_stream_dependency() const;
  public:
  void clear_stream_dependency();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_dependency() const;
  void set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_dependency() const;
  void _internal_set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 weight = 4;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool exclusive = 2;
  bool has_exclusive() const;
  private:
  bool _internal_has_exclusive() const;
  public:
  void clear_exclusive();
  bool exclusive() const;
  void set_exclusive(bool value);
  private:
  bool _internal_exclusive() const;
  void _internal_set_exclusive(bool value);
  public:

  // required bool end_stream = 6;
  bool has_end_stream() const;
  private:
  bool _internal_has_end_stream() const;
  public:
  void clear_end_stream();
  bool end_stream() const;
  void set_end_stream(bool value);
  private:
  bool _internal_end_stream() const;
  void _internal_set_end_stream(bool value);
  public:

  // required bool end_headers = 7;
  bool has_end_headers() const;
  private:
  bool _internal_has_end_headers() const;
  public:
  void clear_end_headers();
  bool end_headers() const;
  void set_end_headers(bool value);
  private:
  bool _internal_end_headers() const;
  void _internal_set_end_headers(bool value);
  public:

  // required bool priority = 8;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  bool priority() const;
  void set_priority(bool value);
  private:
  bool _internal_priority() const;
  void _internal_set_priority(bool value);
  public:

  // required uint32 stream_id = 9;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.HeadersFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField > header_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_dependency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  bool exclusive_;
  bool end_stream_;
  bool end_headers_;
  bool priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class PriorityFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.PriorityFrame) */ {
 public:
  inline PriorityFrame() : PriorityFrame(nullptr) {}
  ~PriorityFrame() override;
  explicit constexpr PriorityFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriorityFrame(const PriorityFrame& from);
  PriorityFrame(PriorityFrame&& from) noexcept
    : PriorityFrame() {
    *this = ::std::move(from);
  }

  inline PriorityFrame& operator=(const PriorityFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorityFrame& operator=(PriorityFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriorityFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriorityFrame* internal_default_instance() {
    return reinterpret_cast<const PriorityFrame*>(
               &_PriorityFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PriorityFrame& a, PriorityFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorityFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriorityFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriorityFrame* New() const final {
    return new PriorityFrame();
  }

  PriorityFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriorityFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriorityFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PriorityFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorityFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.PriorityFrame";
  }
  protected:
  explicit PriorityFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExclusiveFieldNumber = 1,
    kStreamDependencyFieldNumber = 2,
    kWeightFieldNumber = 3,
    kStreamIdFieldNumber = 4,
  };
  // required bool exclusive = 1;
  bool has_exclusive() const;
  private:
  bool _internal_has_exclusive() const;
  public:
  void clear_exclusive();
  bool exclusive() const;
  void set_exclusive(bool value);
  private:
  bool _internal_exclusive() const;
  void _internal_set_exclusive(bool value);
  public:

  // required uint32 stream_dependency = 2;
  bool has_stream_dependency() const;
  private:
  bool _internal_has_stream_dependency() const;
  public:
  void clear_stream_dependency();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_dependency() const;
  void set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_dependency() const;
  void _internal_set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 weight = 3;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.PriorityFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool exclusive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_dependency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class RstStreamFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.RstStreamFrame) */ {
 public:
  inline RstStreamFrame() : RstStreamFrame(nullptr) {}
  ~RstStreamFrame() override;
  explicit constexpr RstStreamFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RstStreamFrame(const RstStreamFrame& from);
  RstStreamFrame(RstStreamFrame&& from) noexcept
    : RstStreamFrame() {
    *this = ::std::move(from);
  }

  inline RstStreamFrame& operator=(const RstStreamFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RstStreamFrame& operator=(RstStreamFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RstStreamFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const RstStreamFrame* internal_default_instance() {
    return reinterpret_cast<const RstStreamFrame*>(
               &_RstStreamFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RstStreamFrame& a, RstStreamFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RstStreamFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RstStreamFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RstStreamFrame* New() const final {
    return new RstStreamFrame();
  }

  RstStreamFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RstStreamFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RstStreamFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RstStreamFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RstStreamFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.RstStreamFrame";
  }
  protected:
  explicit RstStreamFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
    kStreamIdFieldNumber = 2,
  };
  // required uint32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.RstStreamFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class SettingsFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.SettingsFrame) */ {
 public:
  inline SettingsFrame() : SettingsFrame(nullptr) {}
  ~SettingsFrame() override;
  explicit constexpr SettingsFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SettingsFrame(const SettingsFrame& from);
  SettingsFrame(SettingsFrame&& from) noexcept
    : SettingsFrame() {
    *this = ::std::move(from);
  }

  inline SettingsFrame& operator=(const SettingsFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingsFrame& operator=(SettingsFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SettingsFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SettingsFrame* internal_default_instance() {
    return reinterpret_cast<const SettingsFrame*>(
               &_SettingsFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SettingsFrame& a, SettingsFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingsFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettingsFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingsFrame* New() const final {
    return new SettingsFrame();
  }

  SettingsFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingsFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SettingsFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SettingsFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.SettingsFrame";
  }
  protected:
  explicit SettingsFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderTableSizeFieldNumber = 1,
    kMaxConcurrentStreamsFieldNumber = 3,
    kInitialWindowSizeFieldNumber = 4,
    kEnablePushFieldNumber = 2,
    kAckFieldNumber = 7,
    kMaxFrameSizeFieldNumber = 5,
    kMaxHeaderListSizeFieldNumber = 6,
  };
  // optional uint32 header_table_size = 1;
  bool has_header_table_size() const;
  private:
  bool _internal_has_header_table_size() const;
  public:
  void clear_header_table_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 header_table_size() const;
  void set_header_table_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_header_table_size() const;
  void _internal_set_header_table_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_concurrent_streams = 3;
  bool has_max_concurrent_streams() const;
  private:
  bool _internal_has_max_concurrent_streams() const;
  public:
  void clear_max_concurrent_streams();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concurrent_streams() const;
  void set_max_concurrent_streams(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_concurrent_streams() const;
  void _internal_set_max_concurrent_streams(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 initial_window_size = 4;
  bool has_initial_window_size() const;
  private:
  bool _internal_has_initial_window_size() const;
  public:
  void clear_initial_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_window_size() const;
  void set_initial_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_window_size() const;
  void _internal_set_initial_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool enable_push = 2;
  bool has_enable_push() const;
  private:
  bool _internal_has_enable_push() const;
  public:
  void clear_enable_push();
  bool enable_push() const;
  void set_enable_push(bool value);
  private:
  bool _internal_enable_push() const;
  void _internal_set_enable_push(bool value);
  public:

  // required bool ack = 7;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  bool ack() const;
  void set_ack(bool value);
  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);
  public:

  // optional uint32 max_frame_size = 5;
  bool has_max_frame_size() const;
  private:
  bool _internal_has_max_frame_size() const;
  public:
  void clear_max_frame_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_frame_size() const;
  void set_max_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_frame_size() const;
  void _internal_set_max_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_header_list_size = 6;
  bool has_max_header_list_size() const;
  private:
  bool _internal_has_max_header_list_size() const;
  public:
  void clear_max_header_list_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_header_list_size() const;
  void set_max_header_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_header_list_size() const;
  void _internal_set_max_header_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.SettingsFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 header_table_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_concurrent_streams_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_window_size_;
  bool enable_push_;
  bool ack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_frame_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_header_list_size_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class PushPromiseFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.PushPromiseFrame) */ {
 public:
  inline PushPromiseFrame() : PushPromiseFrame(nullptr) {}
  ~PushPromiseFrame() override;
  explicit constexpr PushPromiseFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushPromiseFrame(const PushPromiseFrame& from);
  PushPromiseFrame(PushPromiseFrame&& from) noexcept
    : PushPromiseFrame() {
    *this = ::std::move(from);
  }

  inline PushPromiseFrame& operator=(const PushPromiseFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushPromiseFrame& operator=(PushPromiseFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushPromiseFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushPromiseFrame* internal_default_instance() {
    return reinterpret_cast<const PushPromiseFrame*>(
               &_PushPromiseFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PushPromiseFrame& a, PushPromiseFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PushPromiseFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushPromiseFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushPromiseFrame* New() const final {
    return new PushPromiseFrame();
  }

  PushPromiseFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushPromiseFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushPromiseFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushPromiseFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushPromiseFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.PushPromiseFrame";
  }
  protected:
  explicit PushPromiseFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderListFieldNumber = 3,
    kPadLengthFieldNumber = 1,
    kPromisedStreamIdFieldNumber = 2,
    kEndHeadersFieldNumber = 4,
    kStreamIdFieldNumber = 5,
  };
  // repeated .h2proto.HeaderField header_list = 3;
  int header_list_size() const;
  private:
  int _internal_header_list_size() const;
  public:
  void clear_header_list();
  ::h2proto::HeaderField* mutable_header_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >*
      mutable_header_list();
  private:
  const ::h2proto::HeaderField& _internal_header_list(int index) const;
  ::h2proto::HeaderField* _internal_add_header_list();
  public:
  const ::h2proto::HeaderField& header_list(int index) const;
  ::h2proto::HeaderField* add_header_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >&
      header_list() const;

  // optional uint32 pad_length = 1;
  bool has_pad_length() const;
  private:
  bool _internal_has_pad_length() const;
  public:
  void clear_pad_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_length() const;
  void set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pad_length() const;
  void _internal_set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 promised_stream_id = 2;
  bool has_promised_stream_id() const;
  private:
  bool _internal_has_promised_stream_id() const;
  public:
  void clear_promised_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 promised_stream_id() const;
  void set_promised_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_promised_stream_id() const;
  void _internal_set_promised_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool end_headers = 4;
  bool has_end_headers() const;
  private:
  bool _internal_has_end_headers() const;
  public:
  void clear_end_headers();
  bool end_headers() const;
  void set_end_headers(bool value);
  private:
  bool _internal_end_headers() const;
  void _internal_set_end_headers(bool value);
  public:

  // required uint32 stream_id = 5;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.PushPromiseFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField > header_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pad_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 promised_stream_id_;
  bool end_headers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class PingFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.PingFrame) */ {
 public:
  inline PingFrame() : PingFrame(nullptr) {}
  ~PingFrame() override;
  explicit constexpr PingFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingFrame(const PingFrame& from);
  PingFrame(PingFrame&& from) noexcept
    : PingFrame() {
    *this = ::std::move(from);
  }

  inline PingFrame& operator=(const PingFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingFrame& operator=(PingFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingFrame* internal_default_instance() {
    return reinterpret_cast<const PingFrame*>(
               &_PingFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PingFrame& a, PingFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PingFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingFrame* New() const final {
    return new PingFrame();
  }

  PingFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PingFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.PingFrame";
  }
  protected:
  explicit PingFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueDataLoFieldNumber = 1,
    kOpaqueDataHiFieldNumber = 2,
    kAckFieldNumber = 3,
  };
  // required uint32 opaque_data_lo = 1;
  bool has_opaque_data_lo() const;
  private:
  bool _internal_has_opaque_data_lo() const;
  public:
  void clear_opaque_data_lo();
  ::PROTOBUF_NAMESPACE_ID::uint32 opaque_data_lo() const;
  void set_opaque_data_lo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opaque_data_lo() const;
  void _internal_set_opaque_data_lo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 opaque_data_hi = 2;
  bool has_opaque_data_hi() const;
  private:
  bool _internal_has_opaque_data_hi() const;
  public:
  void clear_opaque_data_hi();
  ::PROTOBUF_NAMESPACE_ID::uint32 opaque_data_hi() const;
  void set_opaque_data_hi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opaque_data_hi() const;
  void _internal_set_opaque_data_hi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool ack = 3;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  bool ack() const;
  void set_ack(bool value);
  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.PingFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opaque_data_lo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opaque_data_hi_;
  bool ack_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class GoawayFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.GoawayFrame) */ {
 public:
  inline GoawayFrame() : GoawayFrame(nullptr) {}
  ~GoawayFrame() override;
  explicit constexpr GoawayFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoawayFrame(const GoawayFrame& from);
  GoawayFrame(GoawayFrame&& from) noexcept
    : GoawayFrame() {
    *this = ::std::move(from);
  }

  inline GoawayFrame& operator=(const GoawayFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoawayFrame& operator=(GoawayFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoawayFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoawayFrame* internal_default_instance() {
    return reinterpret_cast<const GoawayFrame*>(
               &_GoawayFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GoawayFrame& a, GoawayFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(GoawayFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoawayFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoawayFrame* New() const final {
    return new GoawayFrame();
  }

  GoawayFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoawayFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoawayFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GoawayFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoawayFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.GoawayFrame";
  }
  protected:
  explicit GoawayFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueDataFieldNumber = 3,
    kLastStreamIdFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // optional bytes opaque_data = 3;
  bool has_opaque_data() const;
  private:
  bool _internal_has_opaque_data() const;
  public:
  void clear_opaque_data();
  const std::string& opaque_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opaque_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opaque_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_opaque_data();
  void set_allocated_opaque_data(std::string* opaque_data);
  private:
  const std::string& _internal_opaque_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opaque_data(const std::string& value);
  std::string* _internal_mutable_opaque_data();
  public:

  // required uint32 last_stream_id = 1;
  bool has_last_stream_id() const;
  private:
  bool _internal_has_last_stream_id() const;
  public:
  void clear_last_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_stream_id() const;
  void set_last_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_stream_id() const;
  void _internal_set_last_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 error_code = 2;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.GoawayFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_stream_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class WindowUpdateFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.WindowUpdateFrame) */ {
 public:
  inline WindowUpdateFrame() : WindowUpdateFrame(nullptr) {}
  ~WindowUpdateFrame() override;
  explicit constexpr WindowUpdateFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WindowUpdateFrame(const WindowUpdateFrame& from);
  WindowUpdateFrame(WindowUpdateFrame&& from) noexcept
    : WindowUpdateFrame() {
    *this = ::std::move(from);
  }

  inline WindowUpdateFrame& operator=(const WindowUpdateFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowUpdateFrame& operator=(WindowUpdateFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowUpdateFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowUpdateFrame* internal_default_instance() {
    return reinterpret_cast<const WindowUpdateFrame*>(
               &_WindowUpdateFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WindowUpdateFrame& a, WindowUpdateFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowUpdateFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowUpdateFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowUpdateFrame* New() const final {
    return new WindowUpdateFrame();
  }

  WindowUpdateFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowUpdateFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WindowUpdateFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WindowUpdateFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowUpdateFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.WindowUpdateFrame";
  }
  protected:
  explicit WindowUpdateFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowSizeIncrementFieldNumber = 1,
  };
  // required uint32 window_size_increment = 1;
  bool has_window_size_increment() const;
  private:
  bool _internal_has_window_size_increment() const;
  public:
  void clear_window_size_increment();
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size_increment() const;
  void set_window_size_increment(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_window_size_increment() const;
  void _internal_set_window_size_increment(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.WindowUpdateFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size_increment_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// -------------------------------------------------------------------

class ContinuationFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:h2proto.ContinuationFrame) */ {
 public:
  inline ContinuationFrame() : ContinuationFrame(nullptr) {}
  ~ContinuationFrame() override;
  explicit constexpr ContinuationFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContinuationFrame(const ContinuationFrame& from);
  ContinuationFrame(ContinuationFrame&& from) noexcept
    : ContinuationFrame() {
    *this = ::std::move(from);
  }

  inline ContinuationFrame& operator=(const ContinuationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinuationFrame& operator=(ContinuationFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinuationFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinuationFrame* internal_default_instance() {
    return reinterpret_cast<const ContinuationFrame*>(
               &_ContinuationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ContinuationFrame& a, ContinuationFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ContinuationFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinuationFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContinuationFrame* New() const final {
    return new ContinuationFrame();
  }

  ContinuationFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContinuationFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContinuationFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContinuationFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinuationFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "h2proto.ContinuationFrame";
  }
  protected:
  explicit ContinuationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderListFieldNumber = 1,
    kEndHeadersFieldNumber = 2,
    kStreamIdFieldNumber = 3,
  };
  // repeated .h2proto.HeaderField header_list = 1;
  int header_list_size() const;
  private:
  int _internal_header_list_size() const;
  public:
  void clear_header_list();
  ::h2proto::HeaderField* mutable_header_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >*
      mutable_header_list();
  private:
  const ::h2proto::HeaderField& _internal_header_list(int index) const;
  ::h2proto::HeaderField* _internal_add_header_list();
  public:
  const ::h2proto::HeaderField& header_list(int index) const;
  ::h2proto::HeaderField* add_header_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >&
      header_list() const;

  // required bool end_headers = 2;
  bool has_end_headers() const;
  private:
  bool _internal_has_end_headers() const;
  public:
  void clear_end_headers();
  bool end_headers() const;
  void set_end_headers(bool value);
  private:
  bool _internal_end_headers() const;
  void _internal_set_end_headers(bool value);
  public:

  // required uint32 stream_id = 3;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:h2proto.ContinuationFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField > header_list_;
  bool end_headers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_id_;
  friend struct ::TableStruct_h2_5fframe_5fgrammar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// .h2proto.DataFrame data_frame = 1;
inline bool Frame::_internal_has_data_frame() const {
  return frame_oneof_case() == kDataFrame;
}
inline bool Frame::has_data_frame() const {
  return _internal_has_data_frame();
}
inline void Frame::set_has_data_frame() {
  _oneof_case_[0] = kDataFrame;
}
inline void Frame::clear_data_frame() {
  if (_internal_has_data_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.data_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::DataFrame* Frame::release_data_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.data_frame)
  if (_internal_has_data_frame()) {
    clear_has_frame_oneof();
      ::h2proto::DataFrame* temp = frame_oneof_.data_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.data_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::DataFrame& Frame::_internal_data_frame() const {
  return _internal_has_data_frame()
      ? *frame_oneof_.data_frame_
      : reinterpret_cast< ::h2proto::DataFrame&>(::h2proto::_DataFrame_default_instance_);
}
inline const ::h2proto::DataFrame& Frame::data_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.data_frame)
  return _internal_data_frame();
}
inline ::h2proto::DataFrame* Frame::unsafe_arena_release_data_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.data_frame)
  if (_internal_has_data_frame()) {
    clear_has_frame_oneof();
    ::h2proto::DataFrame* temp = frame_oneof_.data_frame_;
    frame_oneof_.data_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_data_frame(::h2proto::DataFrame* data_frame) {
  clear_frame_oneof();
  if (data_frame) {
    set_has_data_frame();
    frame_oneof_.data_frame_ = data_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.data_frame)
}
inline ::h2proto::DataFrame* Frame::_internal_mutable_data_frame() {
  if (!_internal_has_data_frame()) {
    clear_frame_oneof();
    set_has_data_frame();
    frame_oneof_.data_frame_ = CreateMaybeMessage< ::h2proto::DataFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.data_frame_;
}
inline ::h2proto::DataFrame* Frame::mutable_data_frame() {
  ::h2proto::DataFrame* _msg = _internal_mutable_data_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.data_frame)
  return _msg;
}

// .h2proto.HeadersFrame headers_frame = 2;
inline bool Frame::_internal_has_headers_frame() const {
  return frame_oneof_case() == kHeadersFrame;
}
inline bool Frame::has_headers_frame() const {
  return _internal_has_headers_frame();
}
inline void Frame::set_has_headers_frame() {
  _oneof_case_[0] = kHeadersFrame;
}
inline void Frame::clear_headers_frame() {
  if (_internal_has_headers_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.headers_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::HeadersFrame* Frame::release_headers_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.headers_frame)
  if (_internal_has_headers_frame()) {
    clear_has_frame_oneof();
      ::h2proto::HeadersFrame* temp = frame_oneof_.headers_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.headers_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::HeadersFrame& Frame::_internal_headers_frame() const {
  return _internal_has_headers_frame()
      ? *frame_oneof_.headers_frame_
      : reinterpret_cast< ::h2proto::HeadersFrame&>(::h2proto::_HeadersFrame_default_instance_);
}
inline const ::h2proto::HeadersFrame& Frame::headers_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.headers_frame)
  return _internal_headers_frame();
}
inline ::h2proto::HeadersFrame* Frame::unsafe_arena_release_headers_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.headers_frame)
  if (_internal_has_headers_frame()) {
    clear_has_frame_oneof();
    ::h2proto::HeadersFrame* temp = frame_oneof_.headers_frame_;
    frame_oneof_.headers_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_headers_frame(::h2proto::HeadersFrame* headers_frame) {
  clear_frame_oneof();
  if (headers_frame) {
    set_has_headers_frame();
    frame_oneof_.headers_frame_ = headers_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.headers_frame)
}
inline ::h2proto::HeadersFrame* Frame::_internal_mutable_headers_frame() {
  if (!_internal_has_headers_frame()) {
    clear_frame_oneof();
    set_has_headers_frame();
    frame_oneof_.headers_frame_ = CreateMaybeMessage< ::h2proto::HeadersFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.headers_frame_;
}
inline ::h2proto::HeadersFrame* Frame::mutable_headers_frame() {
  ::h2proto::HeadersFrame* _msg = _internal_mutable_headers_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.headers_frame)
  return _msg;
}

// .h2proto.PriorityFrame priority_frame = 3;
inline bool Frame::_internal_has_priority_frame() const {
  return frame_oneof_case() == kPriorityFrame;
}
inline bool Frame::has_priority_frame() const {
  return _internal_has_priority_frame();
}
inline void Frame::set_has_priority_frame() {
  _oneof_case_[0] = kPriorityFrame;
}
inline void Frame::clear_priority_frame() {
  if (_internal_has_priority_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.priority_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::PriorityFrame* Frame::release_priority_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.priority_frame)
  if (_internal_has_priority_frame()) {
    clear_has_frame_oneof();
      ::h2proto::PriorityFrame* temp = frame_oneof_.priority_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.priority_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::PriorityFrame& Frame::_internal_priority_frame() const {
  return _internal_has_priority_frame()
      ? *frame_oneof_.priority_frame_
      : reinterpret_cast< ::h2proto::PriorityFrame&>(::h2proto::_PriorityFrame_default_instance_);
}
inline const ::h2proto::PriorityFrame& Frame::priority_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.priority_frame)
  return _internal_priority_frame();
}
inline ::h2proto::PriorityFrame* Frame::unsafe_arena_release_priority_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.priority_frame)
  if (_internal_has_priority_frame()) {
    clear_has_frame_oneof();
    ::h2proto::PriorityFrame* temp = frame_oneof_.priority_frame_;
    frame_oneof_.priority_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_priority_frame(::h2proto::PriorityFrame* priority_frame) {
  clear_frame_oneof();
  if (priority_frame) {
    set_has_priority_frame();
    frame_oneof_.priority_frame_ = priority_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.priority_frame)
}
inline ::h2proto::PriorityFrame* Frame::_internal_mutable_priority_frame() {
  if (!_internal_has_priority_frame()) {
    clear_frame_oneof();
    set_has_priority_frame();
    frame_oneof_.priority_frame_ = CreateMaybeMessage< ::h2proto::PriorityFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.priority_frame_;
}
inline ::h2proto::PriorityFrame* Frame::mutable_priority_frame() {
  ::h2proto::PriorityFrame* _msg = _internal_mutable_priority_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.priority_frame)
  return _msg;
}

// .h2proto.RstStreamFrame rst_stream_frame = 4;
inline bool Frame::_internal_has_rst_stream_frame() const {
  return frame_oneof_case() == kRstStreamFrame;
}
inline bool Frame::has_rst_stream_frame() const {
  return _internal_has_rst_stream_frame();
}
inline void Frame::set_has_rst_stream_frame() {
  _oneof_case_[0] = kRstStreamFrame;
}
inline void Frame::clear_rst_stream_frame() {
  if (_internal_has_rst_stream_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.rst_stream_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::RstStreamFrame* Frame::release_rst_stream_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.rst_stream_frame)
  if (_internal_has_rst_stream_frame()) {
    clear_has_frame_oneof();
      ::h2proto::RstStreamFrame* temp = frame_oneof_.rst_stream_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.rst_stream_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::RstStreamFrame& Frame::_internal_rst_stream_frame() const {
  return _internal_has_rst_stream_frame()
      ? *frame_oneof_.rst_stream_frame_
      : reinterpret_cast< ::h2proto::RstStreamFrame&>(::h2proto::_RstStreamFrame_default_instance_);
}
inline const ::h2proto::RstStreamFrame& Frame::rst_stream_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.rst_stream_frame)
  return _internal_rst_stream_frame();
}
inline ::h2proto::RstStreamFrame* Frame::unsafe_arena_release_rst_stream_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.rst_stream_frame)
  if (_internal_has_rst_stream_frame()) {
    clear_has_frame_oneof();
    ::h2proto::RstStreamFrame* temp = frame_oneof_.rst_stream_frame_;
    frame_oneof_.rst_stream_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_rst_stream_frame(::h2proto::RstStreamFrame* rst_stream_frame) {
  clear_frame_oneof();
  if (rst_stream_frame) {
    set_has_rst_stream_frame();
    frame_oneof_.rst_stream_frame_ = rst_stream_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.rst_stream_frame)
}
inline ::h2proto::RstStreamFrame* Frame::_internal_mutable_rst_stream_frame() {
  if (!_internal_has_rst_stream_frame()) {
    clear_frame_oneof();
    set_has_rst_stream_frame();
    frame_oneof_.rst_stream_frame_ = CreateMaybeMessage< ::h2proto::RstStreamFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.rst_stream_frame_;
}
inline ::h2proto::RstStreamFrame* Frame::mutable_rst_stream_frame() {
  ::h2proto::RstStreamFrame* _msg = _internal_mutable_rst_stream_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.rst_stream_frame)
  return _msg;
}

// .h2proto.SettingsFrame settings_frame = 5;
inline bool Frame::_internal_has_settings_frame() const {
  return frame_oneof_case() == kSettingsFrame;
}
inline bool Frame::has_settings_frame() const {
  return _internal_has_settings_frame();
}
inline void Frame::set_has_settings_frame() {
  _oneof_case_[0] = kSettingsFrame;
}
inline void Frame::clear_settings_frame() {
  if (_internal_has_settings_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.settings_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::SettingsFrame* Frame::release_settings_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.settings_frame)
  if (_internal_has_settings_frame()) {
    clear_has_frame_oneof();
      ::h2proto::SettingsFrame* temp = frame_oneof_.settings_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.settings_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::SettingsFrame& Frame::_internal_settings_frame() const {
  return _internal_has_settings_frame()
      ? *frame_oneof_.settings_frame_
      : reinterpret_cast< ::h2proto::SettingsFrame&>(::h2proto::_SettingsFrame_default_instance_);
}
inline const ::h2proto::SettingsFrame& Frame::settings_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.settings_frame)
  return _internal_settings_frame();
}
inline ::h2proto::SettingsFrame* Frame::unsafe_arena_release_settings_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.settings_frame)
  if (_internal_has_settings_frame()) {
    clear_has_frame_oneof();
    ::h2proto::SettingsFrame* temp = frame_oneof_.settings_frame_;
    frame_oneof_.settings_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_settings_frame(::h2proto::SettingsFrame* settings_frame) {
  clear_frame_oneof();
  if (settings_frame) {
    set_has_settings_frame();
    frame_oneof_.settings_frame_ = settings_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.settings_frame)
}
inline ::h2proto::SettingsFrame* Frame::_internal_mutable_settings_frame() {
  if (!_internal_has_settings_frame()) {
    clear_frame_oneof();
    set_has_settings_frame();
    frame_oneof_.settings_frame_ = CreateMaybeMessage< ::h2proto::SettingsFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.settings_frame_;
}
inline ::h2proto::SettingsFrame* Frame::mutable_settings_frame() {
  ::h2proto::SettingsFrame* _msg = _internal_mutable_settings_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.settings_frame)
  return _msg;
}

// .h2proto.PushPromiseFrame push_promise_frame = 6;
inline bool Frame::_internal_has_push_promise_frame() const {
  return frame_oneof_case() == kPushPromiseFrame;
}
inline bool Frame::has_push_promise_frame() const {
  return _internal_has_push_promise_frame();
}
inline void Frame::set_has_push_promise_frame() {
  _oneof_case_[0] = kPushPromiseFrame;
}
inline void Frame::clear_push_promise_frame() {
  if (_internal_has_push_promise_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.push_promise_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::PushPromiseFrame* Frame::release_push_promise_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.push_promise_frame)
  if (_internal_has_push_promise_frame()) {
    clear_has_frame_oneof();
      ::h2proto::PushPromiseFrame* temp = frame_oneof_.push_promise_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.push_promise_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::PushPromiseFrame& Frame::_internal_push_promise_frame() const {
  return _internal_has_push_promise_frame()
      ? *frame_oneof_.push_promise_frame_
      : reinterpret_cast< ::h2proto::PushPromiseFrame&>(::h2proto::_PushPromiseFrame_default_instance_);
}
inline const ::h2proto::PushPromiseFrame& Frame::push_promise_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.push_promise_frame)
  return _internal_push_promise_frame();
}
inline ::h2proto::PushPromiseFrame* Frame::unsafe_arena_release_push_promise_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.push_promise_frame)
  if (_internal_has_push_promise_frame()) {
    clear_has_frame_oneof();
    ::h2proto::PushPromiseFrame* temp = frame_oneof_.push_promise_frame_;
    frame_oneof_.push_promise_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_push_promise_frame(::h2proto::PushPromiseFrame* push_promise_frame) {
  clear_frame_oneof();
  if (push_promise_frame) {
    set_has_push_promise_frame();
    frame_oneof_.push_promise_frame_ = push_promise_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.push_promise_frame)
}
inline ::h2proto::PushPromiseFrame* Frame::_internal_mutable_push_promise_frame() {
  if (!_internal_has_push_promise_frame()) {
    clear_frame_oneof();
    set_has_push_promise_frame();
    frame_oneof_.push_promise_frame_ = CreateMaybeMessage< ::h2proto::PushPromiseFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.push_promise_frame_;
}
inline ::h2proto::PushPromiseFrame* Frame::mutable_push_promise_frame() {
  ::h2proto::PushPromiseFrame* _msg = _internal_mutable_push_promise_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.push_promise_frame)
  return _msg;
}

// .h2proto.PingFrame ping_frame = 7;
inline bool Frame::_internal_has_ping_frame() const {
  return frame_oneof_case() == kPingFrame;
}
inline bool Frame::has_ping_frame() const {
  return _internal_has_ping_frame();
}
inline void Frame::set_has_ping_frame() {
  _oneof_case_[0] = kPingFrame;
}
inline void Frame::clear_ping_frame() {
  if (_internal_has_ping_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.ping_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::PingFrame* Frame::release_ping_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.ping_frame)
  if (_internal_has_ping_frame()) {
    clear_has_frame_oneof();
      ::h2proto::PingFrame* temp = frame_oneof_.ping_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.ping_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::PingFrame& Frame::_internal_ping_frame() const {
  return _internal_has_ping_frame()
      ? *frame_oneof_.ping_frame_
      : reinterpret_cast< ::h2proto::PingFrame&>(::h2proto::_PingFrame_default_instance_);
}
inline const ::h2proto::PingFrame& Frame::ping_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.ping_frame)
  return _internal_ping_frame();
}
inline ::h2proto::PingFrame* Frame::unsafe_arena_release_ping_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.ping_frame)
  if (_internal_has_ping_frame()) {
    clear_has_frame_oneof();
    ::h2proto::PingFrame* temp = frame_oneof_.ping_frame_;
    frame_oneof_.ping_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_ping_frame(::h2proto::PingFrame* ping_frame) {
  clear_frame_oneof();
  if (ping_frame) {
    set_has_ping_frame();
    frame_oneof_.ping_frame_ = ping_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.ping_frame)
}
inline ::h2proto::PingFrame* Frame::_internal_mutable_ping_frame() {
  if (!_internal_has_ping_frame()) {
    clear_frame_oneof();
    set_has_ping_frame();
    frame_oneof_.ping_frame_ = CreateMaybeMessage< ::h2proto::PingFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.ping_frame_;
}
inline ::h2proto::PingFrame* Frame::mutable_ping_frame() {
  ::h2proto::PingFrame* _msg = _internal_mutable_ping_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.ping_frame)
  return _msg;
}

// .h2proto.GoawayFrame goaway_frame = 8;
inline bool Frame::_internal_has_goaway_frame() const {
  return frame_oneof_case() == kGoawayFrame;
}
inline bool Frame::has_goaway_frame() const {
  return _internal_has_goaway_frame();
}
inline void Frame::set_has_goaway_frame() {
  _oneof_case_[0] = kGoawayFrame;
}
inline void Frame::clear_goaway_frame() {
  if (_internal_has_goaway_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.goaway_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::GoawayFrame* Frame::release_goaway_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.goaway_frame)
  if (_internal_has_goaway_frame()) {
    clear_has_frame_oneof();
      ::h2proto::GoawayFrame* temp = frame_oneof_.goaway_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.goaway_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::GoawayFrame& Frame::_internal_goaway_frame() const {
  return _internal_has_goaway_frame()
      ? *frame_oneof_.goaway_frame_
      : reinterpret_cast< ::h2proto::GoawayFrame&>(::h2proto::_GoawayFrame_default_instance_);
}
inline const ::h2proto::GoawayFrame& Frame::goaway_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.goaway_frame)
  return _internal_goaway_frame();
}
inline ::h2proto::GoawayFrame* Frame::unsafe_arena_release_goaway_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.goaway_frame)
  if (_internal_has_goaway_frame()) {
    clear_has_frame_oneof();
    ::h2proto::GoawayFrame* temp = frame_oneof_.goaway_frame_;
    frame_oneof_.goaway_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_goaway_frame(::h2proto::GoawayFrame* goaway_frame) {
  clear_frame_oneof();
  if (goaway_frame) {
    set_has_goaway_frame();
    frame_oneof_.goaway_frame_ = goaway_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.goaway_frame)
}
inline ::h2proto::GoawayFrame* Frame::_internal_mutable_goaway_frame() {
  if (!_internal_has_goaway_frame()) {
    clear_frame_oneof();
    set_has_goaway_frame();
    frame_oneof_.goaway_frame_ = CreateMaybeMessage< ::h2proto::GoawayFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.goaway_frame_;
}
inline ::h2proto::GoawayFrame* Frame::mutable_goaway_frame() {
  ::h2proto::GoawayFrame* _msg = _internal_mutable_goaway_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.goaway_frame)
  return _msg;
}

// .h2proto.WindowUpdateFrame window_update_frame = 9;
inline bool Frame::_internal_has_window_update_frame() const {
  return frame_oneof_case() == kWindowUpdateFrame;
}
inline bool Frame::has_window_update_frame() const {
  return _internal_has_window_update_frame();
}
inline void Frame::set_has_window_update_frame() {
  _oneof_case_[0] = kWindowUpdateFrame;
}
inline void Frame::clear_window_update_frame() {
  if (_internal_has_window_update_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.window_update_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::WindowUpdateFrame* Frame::release_window_update_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.window_update_frame)
  if (_internal_has_window_update_frame()) {
    clear_has_frame_oneof();
      ::h2proto::WindowUpdateFrame* temp = frame_oneof_.window_update_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.window_update_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::WindowUpdateFrame& Frame::_internal_window_update_frame() const {
  return _internal_has_window_update_frame()
      ? *frame_oneof_.window_update_frame_
      : reinterpret_cast< ::h2proto::WindowUpdateFrame&>(::h2proto::_WindowUpdateFrame_default_instance_);
}
inline const ::h2proto::WindowUpdateFrame& Frame::window_update_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.window_update_frame)
  return _internal_window_update_frame();
}
inline ::h2proto::WindowUpdateFrame* Frame::unsafe_arena_release_window_update_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.window_update_frame)
  if (_internal_has_window_update_frame()) {
    clear_has_frame_oneof();
    ::h2proto::WindowUpdateFrame* temp = frame_oneof_.window_update_frame_;
    frame_oneof_.window_update_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_window_update_frame(::h2proto::WindowUpdateFrame* window_update_frame) {
  clear_frame_oneof();
  if (window_update_frame) {
    set_has_window_update_frame();
    frame_oneof_.window_update_frame_ = window_update_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.window_update_frame)
}
inline ::h2proto::WindowUpdateFrame* Frame::_internal_mutable_window_update_frame() {
  if (!_internal_has_window_update_frame()) {
    clear_frame_oneof();
    set_has_window_update_frame();
    frame_oneof_.window_update_frame_ = CreateMaybeMessage< ::h2proto::WindowUpdateFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.window_update_frame_;
}
inline ::h2proto::WindowUpdateFrame* Frame::mutable_window_update_frame() {
  ::h2proto::WindowUpdateFrame* _msg = _internal_mutable_window_update_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.window_update_frame)
  return _msg;
}

// .h2proto.ContinuationFrame continuation_frame = 10;
inline bool Frame::_internal_has_continuation_frame() const {
  return frame_oneof_case() == kContinuationFrame;
}
inline bool Frame::has_continuation_frame() const {
  return _internal_has_continuation_frame();
}
inline void Frame::set_has_continuation_frame() {
  _oneof_case_[0] = kContinuationFrame;
}
inline void Frame::clear_continuation_frame() {
  if (_internal_has_continuation_frame()) {
    if (GetArenaForAllocation() == nullptr) {
      delete frame_oneof_.continuation_frame_;
    }
    clear_has_frame_oneof();
  }
}
inline ::h2proto::ContinuationFrame* Frame::release_continuation_frame() {
  // @@protoc_insertion_point(field_release:h2proto.Frame.continuation_frame)
  if (_internal_has_continuation_frame()) {
    clear_has_frame_oneof();
      ::h2proto::ContinuationFrame* temp = frame_oneof_.continuation_frame_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_oneof_.continuation_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::h2proto::ContinuationFrame& Frame::_internal_continuation_frame() const {
  return _internal_has_continuation_frame()
      ? *frame_oneof_.continuation_frame_
      : reinterpret_cast< ::h2proto::ContinuationFrame&>(::h2proto::_ContinuationFrame_default_instance_);
}
inline const ::h2proto::ContinuationFrame& Frame::continuation_frame() const {
  // @@protoc_insertion_point(field_get:h2proto.Frame.continuation_frame)
  return _internal_continuation_frame();
}
inline ::h2proto::ContinuationFrame* Frame::unsafe_arena_release_continuation_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:h2proto.Frame.continuation_frame)
  if (_internal_has_continuation_frame()) {
    clear_has_frame_oneof();
    ::h2proto::ContinuationFrame* temp = frame_oneof_.continuation_frame_;
    frame_oneof_.continuation_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_continuation_frame(::h2proto::ContinuationFrame* continuation_frame) {
  clear_frame_oneof();
  if (continuation_frame) {
    set_has_continuation_frame();
    frame_oneof_.continuation_frame_ = continuation_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.Frame.continuation_frame)
}
inline ::h2proto::ContinuationFrame* Frame::_internal_mutable_continuation_frame() {
  if (!_internal_has_continuation_frame()) {
    clear_frame_oneof();
    set_has_continuation_frame();
    frame_oneof_.continuation_frame_ = CreateMaybeMessage< ::h2proto::ContinuationFrame >(GetArenaForAllocation());
  }
  return frame_oneof_.continuation_frame_;
}
inline ::h2proto::ContinuationFrame* Frame::mutable_continuation_frame() {
  ::h2proto::ContinuationFrame* _msg = _internal_mutable_continuation_frame();
  // @@protoc_insertion_point(field_mutable:h2proto.Frame.continuation_frame)
  return _msg;
}

inline bool Frame::has_frame_oneof() const {
  return frame_oneof_case() != FRAME_ONEOF_NOT_SET;
}
inline void Frame::clear_has_frame_oneof() {
  _oneof_case_[0] = FRAME_ONEOF_NOT_SET;
}
inline Frame::FrameOneofCase Frame::frame_oneof_case() const {
  return Frame::FrameOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DataFrame

// optional uint32 pad_length = 1;
inline bool DataFrame::_internal_has_pad_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataFrame::has_pad_length() const {
  return _internal_has_pad_length();
}
inline void DataFrame::clear_pad_length() {
  pad_length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataFrame::_internal_pad_length() const {
  return pad_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataFrame::pad_length() const {
  // @@protoc_insertion_point(field_get:h2proto.DataFrame.pad_length)
  return _internal_pad_length();
}
inline void DataFrame::_internal_set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pad_length_ = value;
}
inline void DataFrame::set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_length(value);
  // @@protoc_insertion_point(field_set:h2proto.DataFrame.pad_length)
}

// required bytes data = 2;
inline bool DataFrame::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataFrame::has_data() const {
  return _internal_has_data();
}
inline void DataFrame::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataFrame::data() const {
  // @@protoc_insertion_point(field_get:h2proto.DataFrame.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataFrame::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:h2proto.DataFrame.data)
}
inline std::string* DataFrame::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:h2proto.DataFrame.data)
  return _s;
}
inline const std::string& DataFrame::_internal_data() const {
  return data_.Get();
}
inline void DataFrame::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataFrame::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataFrame::release_data() {
  // @@protoc_insertion_point(field_release:h2proto.DataFrame.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataFrame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:h2proto.DataFrame.data)
}

// required bool end_stream = 3;
inline bool DataFrame::_internal_has_end_stream() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataFrame::has_end_stream() const {
  return _internal_has_end_stream();
}
inline void DataFrame::clear_end_stream() {
  end_stream_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DataFrame::_internal_end_stream() const {
  return end_stream_;
}
inline bool DataFrame::end_stream() const {
  // @@protoc_insertion_point(field_get:h2proto.DataFrame.end_stream)
  return _internal_end_stream();
}
inline void DataFrame::_internal_set_end_stream(bool value) {
  _has_bits_[0] |= 0x00000004u;
  end_stream_ = value;
}
inline void DataFrame::set_end_stream(bool value) {
  _internal_set_end_stream(value);
  // @@protoc_insertion_point(field_set:h2proto.DataFrame.end_stream)
}

// required uint32 stream_id = 4;
inline bool DataFrame::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataFrame::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void DataFrame::clear_stream_id() {
  stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataFrame::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataFrame::stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.DataFrame.stream_id)
  return _internal_stream_id();
}
inline void DataFrame::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void DataFrame::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.DataFrame.stream_id)
}

// -------------------------------------------------------------------

// HPackInt

// required uint64 value = 1;
inline bool HPackInt::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HPackInt::has_value() const {
  return _internal_has_value();
}
inline void HPackInt::clear_value() {
  value_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HPackInt::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HPackInt::value() const {
  // @@protoc_insertion_point(field_get:h2proto.HPackInt.value)
  return _internal_value();
}
inline void HPackInt::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void HPackInt::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:h2proto.HPackInt.value)
}

// required uint32 prefix = 2;
inline bool HPackInt::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HPackInt::has_prefix() const {
  return _internal_has_prefix();
}
inline void HPackInt::clear_prefix() {
  prefix_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HPackInt::_internal_prefix() const {
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HPackInt::prefix() const {
  // @@protoc_insertion_point(field_get:h2proto.HPackInt.prefix)
  return _internal_prefix();
}
inline void HPackInt::_internal_set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  prefix_ = value;
}
inline void HPackInt::set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:h2proto.HPackInt.prefix)
}

// required uint32 msb_mask = 3;
inline bool HPackInt::_internal_has_msb_mask() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HPackInt::has_msb_mask() const {
  return _internal_has_msb_mask();
}
inline void HPackInt::clear_msb_mask() {
  msb_mask_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HPackInt::_internal_msb_mask() const {
  return msb_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HPackInt::msb_mask() const {
  // @@protoc_insertion_point(field_get:h2proto.HPackInt.msb_mask)
  return _internal_msb_mask();
}
inline void HPackInt::_internal_set_msb_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  msb_mask_ = value;
}
inline void HPackInt::set_msb_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msb_mask(value);
  // @@protoc_insertion_point(field_set:h2proto.HPackInt.msb_mask)
}

// -------------------------------------------------------------------

// HPackString

// required bytes data = 1;
inline bool HPackString::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HPackString::has_data() const {
  return _internal_has_data();
}
inline void HPackString::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HPackString::data() const {
  // @@protoc_insertion_point(field_get:h2proto.HPackString.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HPackString::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:h2proto.HPackString.data)
}
inline std::string* HPackString::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:h2proto.HPackString.data)
  return _s;
}
inline const std::string& HPackString::_internal_data() const {
  return data_.Get();
}
inline void HPackString::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HPackString::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HPackString::release_data() {
  // @@protoc_insertion_point(field_release:h2proto.HPackString.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HPackString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:h2proto.HPackString.data)
}

// required bool force_literal = 2;
inline bool HPackString::_internal_has_force_literal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HPackString::has_force_literal() const {
  return _internal_has_force_literal();
}
inline void HPackString::clear_force_literal() {
  force_literal_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HPackString::_internal_force_literal() const {
  return force_literal_;
}
inline bool HPackString::force_literal() const {
  // @@protoc_insertion_point(field_get:h2proto.HPackString.force_literal)
  return _internal_force_literal();
}
inline void HPackString::_internal_set_force_literal(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_literal_ = value;
}
inline void HPackString::set_force_literal(bool value) {
  _internal_set_force_literal(value);
  // @@protoc_insertion_point(field_set:h2proto.HPackString.force_literal)
}

// required bool huffman = 3;
inline bool HPackString::_internal_has_huffman() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HPackString::has_huffman() const {
  return _internal_has_huffman();
}
inline void HPackString::clear_huffman() {
  huffman_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HPackString::_internal_huffman() const {
  return huffman_;
}
inline bool HPackString::huffman() const {
  // @@protoc_insertion_point(field_get:h2proto.HPackString.huffman)
  return _internal_huffman();
}
inline void HPackString::_internal_set_huffman(bool value) {
  _has_bits_[0] |= 0x00000004u;
  huffman_ = value;
}
inline void HPackString::set_huffman(bool value) {
  _internal_set_huffman(value);
  // @@protoc_insertion_point(field_set:h2proto.HPackString.huffman)
}

// -------------------------------------------------------------------

// HeaderField

// required .h2proto.HPackString name = 1;
inline bool HeaderField::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool HeaderField::has_name() const {
  return _internal_has_name();
}
inline void HeaderField::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::h2proto::HPackString& HeaderField::_internal_name() const {
  const ::h2proto::HPackString* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::h2proto::HPackString&>(
      ::h2proto::_HPackString_default_instance_);
}
inline const ::h2proto::HPackString& HeaderField::name() const {
  // @@protoc_insertion_point(field_get:h2proto.HeaderField.name)
  return _internal_name();
}
inline void HeaderField::unsafe_arena_set_allocated_name(
    ::h2proto::HPackString* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.HeaderField.name)
}
inline ::h2proto::HPackString* HeaderField::release_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::h2proto::HPackString* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::h2proto::HPackString* HeaderField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:h2proto.HeaderField.name)
  _has_bits_[0] &= ~0x00000001u;
  ::h2proto::HPackString* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::h2proto::HPackString* HeaderField::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::h2proto::HPackString>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::h2proto::HPackString* HeaderField::mutable_name() {
  ::h2proto::HPackString* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:h2proto.HeaderField.name)
  return _msg;
}
inline void HeaderField::set_allocated_name(::h2proto::HPackString* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::HPackString>::GetOwningArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:h2proto.HeaderField.name)
}

// required .h2proto.HPackString value = 2;
inline bool HeaderField::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool HeaderField::has_value() const {
  return _internal_has_value();
}
inline void HeaderField::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::h2proto::HPackString& HeaderField::_internal_value() const {
  const ::h2proto::HPackString* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::h2proto::HPackString&>(
      ::h2proto::_HPackString_default_instance_);
}
inline const ::h2proto::HPackString& HeaderField::value() const {
  // @@protoc_insertion_point(field_get:h2proto.HeaderField.value)
  return _internal_value();
}
inline void HeaderField::unsafe_arena_set_allocated_value(
    ::h2proto::HPackString* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:h2proto.HeaderField.value)
}
inline ::h2proto::HPackString* HeaderField::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::h2proto::HPackString* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::h2proto::HPackString* HeaderField::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:h2proto.HeaderField.value)
  _has_bits_[0] &= ~0x00000002u;
  ::h2proto::HPackString* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::h2proto::HPackString* HeaderField::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::h2proto::HPackString>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::h2proto::HPackString* HeaderField::mutable_value() {
  ::h2proto::HPackString* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:h2proto.HeaderField.value)
  return _msg;
}
inline void HeaderField::set_allocated_value(::h2proto::HPackString* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::h2proto::HPackString>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:h2proto.HeaderField.value)
}

// required .h2proto.HeaderField.Indexing indexing = 6;
inline bool HeaderField::_internal_has_indexing() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeaderField::has_indexing() const {
  return _internal_has_indexing();
}
inline void HeaderField::clear_indexing() {
  indexing_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::h2proto::HeaderField_Indexing HeaderField::_internal_indexing() const {
  return static_cast< ::h2proto::HeaderField_Indexing >(indexing_);
}
inline ::h2proto::HeaderField_Indexing HeaderField::indexing() const {
  // @@protoc_insertion_point(field_get:h2proto.HeaderField.indexing)
  return _internal_indexing();
}
inline void HeaderField::_internal_set_indexing(::h2proto::HeaderField_Indexing value) {
  assert(::h2proto::HeaderField_Indexing_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  indexing_ = value;
}
inline void HeaderField::set_indexing(::h2proto::HeaderField_Indexing value) {
  _internal_set_indexing(value);
  // @@protoc_insertion_point(field_set:h2proto.HeaderField.indexing)
}

// -------------------------------------------------------------------

// HeadersFrame

// optional uint32 pad_length = 1;
inline bool HeadersFrame::_internal_has_pad_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeadersFrame::has_pad_length() const {
  return _internal_has_pad_length();
}
inline void HeadersFrame::clear_pad_length() {
  pad_length_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::_internal_pad_length() const {
  return pad_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::pad_length() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.pad_length)
  return _internal_pad_length();
}
inline void HeadersFrame::_internal_set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pad_length_ = value;
}
inline void HeadersFrame::set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_length(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.pad_length)
}

// required bool exclusive = 2;
inline bool HeadersFrame::_internal_has_exclusive() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HeadersFrame::has_exclusive() const {
  return _internal_has_exclusive();
}
inline void HeadersFrame::clear_exclusive() {
  exclusive_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HeadersFrame::_internal_exclusive() const {
  return exclusive_;
}
inline bool HeadersFrame::exclusive() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.exclusive)
  return _internal_exclusive();
}
inline void HeadersFrame::_internal_set_exclusive(bool value) {
  _has_bits_[0] |= 0x00000008u;
  exclusive_ = value;
}
inline void HeadersFrame::set_exclusive(bool value) {
  _internal_set_exclusive(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.exclusive)
}

// required uint32 stream_dependency = 3;
inline bool HeadersFrame::_internal_has_stream_dependency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeadersFrame::has_stream_dependency() const {
  return _internal_has_stream_dependency();
}
inline void HeadersFrame::clear_stream_dependency() {
  stream_dependency_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::_internal_stream_dependency() const {
  return stream_dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::stream_dependency() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.stream_dependency)
  return _internal_stream_dependency();
}
inline void HeadersFrame::_internal_set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_dependency_ = value;
}
inline void HeadersFrame::set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_dependency(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.stream_dependency)
}

// required uint32 weight = 4;
inline bool HeadersFrame::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeadersFrame::has_weight() const {
  return _internal_has_weight();
}
inline void HeadersFrame::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::weight() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.weight)
  return _internal_weight();
}
inline void HeadersFrame::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void HeadersFrame::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.weight)
}

// repeated .h2proto.HeaderField header_list = 5;
inline int HeadersFrame::_internal_header_list_size() const {
  return header_list_.size();
}
inline int HeadersFrame::header_list_size() const {
  return _internal_header_list_size();
}
inline void HeadersFrame::clear_header_list() {
  header_list_.Clear();
}
inline ::h2proto::HeaderField* HeadersFrame::mutable_header_list(int index) {
  // @@protoc_insertion_point(field_mutable:h2proto.HeadersFrame.header_list)
  return header_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >*
HeadersFrame::mutable_header_list() {
  // @@protoc_insertion_point(field_mutable_list:h2proto.HeadersFrame.header_list)
  return &header_list_;
}
inline const ::h2proto::HeaderField& HeadersFrame::_internal_header_list(int index) const {
  return header_list_.Get(index);
}
inline const ::h2proto::HeaderField& HeadersFrame::header_list(int index) const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.header_list)
  return _internal_header_list(index);
}
inline ::h2proto::HeaderField* HeadersFrame::_internal_add_header_list() {
  return header_list_.Add();
}
inline ::h2proto::HeaderField* HeadersFrame::add_header_list() {
  ::h2proto::HeaderField* _add = _internal_add_header_list();
  // @@protoc_insertion_point(field_add:h2proto.HeadersFrame.header_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >&
HeadersFrame::header_list() const {
  // @@protoc_insertion_point(field_list:h2proto.HeadersFrame.header_list)
  return header_list_;
}

// required bool end_stream = 6;
inline bool HeadersFrame::_internal_has_end_stream() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HeadersFrame::has_end_stream() const {
  return _internal_has_end_stream();
}
inline void HeadersFrame::clear_end_stream() {
  end_stream_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool HeadersFrame::_internal_end_stream() const {
  return end_stream_;
}
inline bool HeadersFrame::end_stream() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.end_stream)
  return _internal_end_stream();
}
inline void HeadersFrame::_internal_set_end_stream(bool value) {
  _has_bits_[0] |= 0x00000010u;
  end_stream_ = value;
}
inline void HeadersFrame::set_end_stream(bool value) {
  _internal_set_end_stream(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.end_stream)
}

// required bool end_headers = 7;
inline bool HeadersFrame::_internal_has_end_headers() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HeadersFrame::has_end_headers() const {
  return _internal_has_end_headers();
}
inline void HeadersFrame::clear_end_headers() {
  end_headers_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool HeadersFrame::_internal_end_headers() const {
  return end_headers_;
}
inline bool HeadersFrame::end_headers() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.end_headers)
  return _internal_end_headers();
}
inline void HeadersFrame::_internal_set_end_headers(bool value) {
  _has_bits_[0] |= 0x00000020u;
  end_headers_ = value;
}
inline void HeadersFrame::set_end_headers(bool value) {
  _internal_set_end_headers(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.end_headers)
}

// required bool priority = 8;
inline bool HeadersFrame::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HeadersFrame::has_priority() const {
  return _internal_has_priority();
}
inline void HeadersFrame::clear_priority() {
  priority_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HeadersFrame::_internal_priority() const {
  return priority_;
}
inline bool HeadersFrame::priority() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.priority)
  return _internal_priority();
}
inline void HeadersFrame::_internal_set_priority(bool value) {
  _has_bits_[0] |= 0x00000040u;
  priority_ = value;
}
inline void HeadersFrame::set_priority(bool value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.priority)
}

// required uint32 stream_id = 9;
inline bool HeadersFrame::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HeadersFrame::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void HeadersFrame::clear_stream_id() {
  stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeadersFrame::stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.HeadersFrame.stream_id)
  return _internal_stream_id();
}
inline void HeadersFrame::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  stream_id_ = value;
}
inline void HeadersFrame::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.HeadersFrame.stream_id)
}

// -------------------------------------------------------------------

// PriorityFrame

// required bool exclusive = 1;
inline bool PriorityFrame::_internal_has_exclusive() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriorityFrame::has_exclusive() const {
  return _internal_has_exclusive();
}
inline void PriorityFrame::clear_exclusive() {
  exclusive_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PriorityFrame::_internal_exclusive() const {
  return exclusive_;
}
inline bool PriorityFrame::exclusive() const {
  // @@protoc_insertion_point(field_get:h2proto.PriorityFrame.exclusive)
  return _internal_exclusive();
}
inline void PriorityFrame::_internal_set_exclusive(bool value) {
  _has_bits_[0] |= 0x00000001u;
  exclusive_ = value;
}
inline void PriorityFrame::set_exclusive(bool value) {
  _internal_set_exclusive(value);
  // @@protoc_insertion_point(field_set:h2proto.PriorityFrame.exclusive)
}

// required uint32 stream_dependency = 2;
inline bool PriorityFrame::_internal_has_stream_dependency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriorityFrame::has_stream_dependency() const {
  return _internal_has_stream_dependency();
}
inline void PriorityFrame::clear_stream_dependency() {
  stream_dependency_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorityFrame::_internal_stream_dependency() const {
  return stream_dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorityFrame::stream_dependency() const {
  // @@protoc_insertion_point(field_get:h2proto.PriorityFrame.stream_dependency)
  return _internal_stream_dependency();
}
inline void PriorityFrame::_internal_set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_dependency_ = value;
}
inline void PriorityFrame::set_stream_dependency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_dependency(value);
  // @@protoc_insertion_point(field_set:h2proto.PriorityFrame.stream_dependency)
}

// required uint32 weight = 3;
inline bool PriorityFrame::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriorityFrame::has_weight() const {
  return _internal_has_weight();
}
inline void PriorityFrame::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorityFrame::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorityFrame::weight() const {
  // @@protoc_insertion_point(field_get:h2proto.PriorityFrame.weight)
  return _internal_weight();
}
inline void PriorityFrame::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void PriorityFrame::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:h2proto.PriorityFrame.weight)
}

// required uint32 stream_id = 4;
inline bool PriorityFrame::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PriorityFrame::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void PriorityFrame::clear_stream_id() {
  stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorityFrame::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorityFrame::stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.PriorityFrame.stream_id)
  return _internal_stream_id();
}
inline void PriorityFrame::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void PriorityFrame::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.PriorityFrame.stream_id)
}

// -------------------------------------------------------------------

// RstStreamFrame

// required uint32 error_code = 1;
inline bool RstStreamFrame::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RstStreamFrame::has_error_code() const {
  return _internal_has_error_code();
}
inline void RstStreamFrame::clear_error_code() {
  error_code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RstStreamFrame::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RstStreamFrame::error_code() const {
  // @@protoc_insertion_point(field_get:h2proto.RstStreamFrame.error_code)
  return _internal_error_code();
}
inline void RstStreamFrame::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_code_ = value;
}
inline void RstStreamFrame::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:h2proto.RstStreamFrame.error_code)
}

// required uint32 stream_id = 2;
inline bool RstStreamFrame::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RstStreamFrame::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void RstStreamFrame::clear_stream_id() {
  stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RstStreamFrame::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RstStreamFrame::stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.RstStreamFrame.stream_id)
  return _internal_stream_id();
}
inline void RstStreamFrame::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_id_ = value;
}
inline void RstStreamFrame::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.RstStreamFrame.stream_id)
}

// -------------------------------------------------------------------

// SettingsFrame

// optional uint32 header_table_size = 1;
inline bool SettingsFrame::_internal_has_header_table_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SettingsFrame::has_header_table_size() const {
  return _internal_has_header_table_size();
}
inline void SettingsFrame::clear_header_table_size() {
  header_table_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::_internal_header_table_size() const {
  return header_table_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::header_table_size() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.header_table_size)
  return _internal_header_table_size();
}
inline void SettingsFrame::_internal_set_header_table_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  header_table_size_ = value;
}
inline void SettingsFrame::set_header_table_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_header_table_size(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.header_table_size)
}

// optional bool enable_push = 2;
inline bool SettingsFrame::_internal_has_enable_push() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SettingsFrame::has_enable_push() const {
  return _internal_has_enable_push();
}
inline void SettingsFrame::clear_enable_push() {
  enable_push_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SettingsFrame::_internal_enable_push() const {
  return enable_push_;
}
inline bool SettingsFrame::enable_push() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.enable_push)
  return _internal_enable_push();
}
inline void SettingsFrame::_internal_set_enable_push(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_push_ = value;
}
inline void SettingsFrame::set_enable_push(bool value) {
  _internal_set_enable_push(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.enable_push)
}

// optional uint32 max_concurrent_streams = 3;
inline bool SettingsFrame::_internal_has_max_concurrent_streams() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SettingsFrame::has_max_concurrent_streams() const {
  return _internal_has_max_concurrent_streams();
}
inline void SettingsFrame::clear_max_concurrent_streams() {
  max_concurrent_streams_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::_internal_max_concurrent_streams() const {
  return max_concurrent_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::max_concurrent_streams() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.max_concurrent_streams)
  return _internal_max_concurrent_streams();
}
inline void SettingsFrame::_internal_set_max_concurrent_streams(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_concurrent_streams_ = value;
}
inline void SettingsFrame::set_max_concurrent_streams(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_concurrent_streams(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.max_concurrent_streams)
}

// optional uint32 initial_window_size = 4;
inline bool SettingsFrame::_internal_has_initial_window_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SettingsFrame::has_initial_window_size() const {
  return _internal_has_initial_window_size();
}
inline void SettingsFrame::clear_initial_window_size() {
  initial_window_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::_internal_initial_window_size() const {
  return initial_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::initial_window_size() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.initial_window_size)
  return _internal_initial_window_size();
}
inline void SettingsFrame::_internal_set_initial_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  initial_window_size_ = value;
}
inline void SettingsFrame::set_initial_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initial_window_size(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.initial_window_size)
}

// optional uint32 max_frame_size = 5;
inline bool SettingsFrame::_internal_has_max_frame_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SettingsFrame::has_max_frame_size() const {
  return _internal_has_max_frame_size();
}
inline void SettingsFrame::clear_max_frame_size() {
  max_frame_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::_internal_max_frame_size() const {
  return max_frame_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::max_frame_size() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.max_frame_size)
  return _internal_max_frame_size();
}
inline void SettingsFrame::_internal_set_max_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_frame_size_ = value;
}
inline void SettingsFrame::set_max_frame_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_frame_size(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.max_frame_size)
}

// optional uint32 max_header_list_size = 6;
inline bool SettingsFrame::_internal_has_max_header_list_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SettingsFrame::has_max_header_list_size() const {
  return _internal_has_max_header_list_size();
}
inline void SettingsFrame::clear_max_header_list_size() {
  max_header_list_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::_internal_max_header_list_size() const {
  return max_header_list_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SettingsFrame::max_header_list_size() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.max_header_list_size)
  return _internal_max_header_list_size();
}
inline void SettingsFrame::_internal_set_max_header_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_header_list_size_ = value;
}
inline void SettingsFrame::set_max_header_list_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_header_list_size(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.max_header_list_size)
}

// required bool ack = 7;
inline bool SettingsFrame::_internal_has_ack() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SettingsFrame::has_ack() const {
  return _internal_has_ack();
}
inline void SettingsFrame::clear_ack() {
  ack_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SettingsFrame::_internal_ack() const {
  return ack_;
}
inline bool SettingsFrame::ack() const {
  // @@protoc_insertion_point(field_get:h2proto.SettingsFrame.ack)
  return _internal_ack();
}
inline void SettingsFrame::_internal_set_ack(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ack_ = value;
}
inline void SettingsFrame::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:h2proto.SettingsFrame.ack)
}

// -------------------------------------------------------------------

// PushPromiseFrame

// optional uint32 pad_length = 1;
inline bool PushPromiseFrame::_internal_has_pad_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PushPromiseFrame::has_pad_length() const {
  return _internal_has_pad_length();
}
inline void PushPromiseFrame::clear_pad_length() {
  pad_length_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushPromiseFrame::_internal_pad_length() const {
  return pad_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushPromiseFrame::pad_length() const {
  // @@protoc_insertion_point(field_get:h2proto.PushPromiseFrame.pad_length)
  return _internal_pad_length();
}
inline void PushPromiseFrame::_internal_set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pad_length_ = value;
}
inline void PushPromiseFrame::set_pad_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pad_length(value);
  // @@protoc_insertion_point(field_set:h2proto.PushPromiseFrame.pad_length)
}

// required uint32 promised_stream_id = 2;
inline bool PushPromiseFrame::_internal_has_promised_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PushPromiseFrame::has_promised_stream_id() const {
  return _internal_has_promised_stream_id();
}
inline void PushPromiseFrame::clear_promised_stream_id() {
  promised_stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushPromiseFrame::_internal_promised_stream_id() const {
  return promised_stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushPromiseFrame::promised_stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.PushPromiseFrame.promised_stream_id)
  return _internal_promised_stream_id();
}
inline void PushPromiseFrame::_internal_set_promised_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  promised_stream_id_ = value;
}
inline void PushPromiseFrame::set_promised_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_promised_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.PushPromiseFrame.promised_stream_id)
}

// repeated .h2proto.HeaderField header_list = 3;
inline int PushPromiseFrame::_internal_header_list_size() const {
  return header_list_.size();
}
inline int PushPromiseFrame::header_list_size() const {
  return _internal_header_list_size();
}
inline void PushPromiseFrame::clear_header_list() {
  header_list_.Clear();
}
inline ::h2proto::HeaderField* PushPromiseFrame::mutable_header_list(int index) {
  // @@protoc_insertion_point(field_mutable:h2proto.PushPromiseFrame.header_list)
  return header_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >*
PushPromiseFrame::mutable_header_list() {
  // @@protoc_insertion_point(field_mutable_list:h2proto.PushPromiseFrame.header_list)
  return &header_list_;
}
inline const ::h2proto::HeaderField& PushPromiseFrame::_internal_header_list(int index) const {
  return header_list_.Get(index);
}
inline const ::h2proto::HeaderField& PushPromiseFrame::header_list(int index) const {
  // @@protoc_insertion_point(field_get:h2proto.PushPromiseFrame.header_list)
  return _internal_header_list(index);
}
inline ::h2proto::HeaderField* PushPromiseFrame::_internal_add_header_list() {
  return header_list_.Add();
}
inline ::h2proto::HeaderField* PushPromiseFrame::add_header_list() {
  ::h2proto::HeaderField* _add = _internal_add_header_list();
  // @@protoc_insertion_point(field_add:h2proto.PushPromiseFrame.header_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >&
PushPromiseFrame::header_list() const {
  // @@protoc_insertion_point(field_list:h2proto.PushPromiseFrame.header_list)
  return header_list_;
}

// required bool end_headers = 4;
inline bool PushPromiseFrame::_internal_has_end_headers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PushPromiseFrame::has_end_headers() const {
  return _internal_has_end_headers();
}
inline void PushPromiseFrame::clear_end_headers() {
  end_headers_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PushPromiseFrame::_internal_end_headers() const {
  return end_headers_;
}
inline bool PushPromiseFrame::end_headers() const {
  // @@protoc_insertion_point(field_get:h2proto.PushPromiseFrame.end_headers)
  return _internal_end_headers();
}
inline void PushPromiseFrame::_internal_set_end_headers(bool value) {
  _has_bits_[0] |= 0x00000004u;
  end_headers_ = value;
}
inline void PushPromiseFrame::set_end_headers(bool value) {
  _internal_set_end_headers(value);
  // @@protoc_insertion_point(field_set:h2proto.PushPromiseFrame.end_headers)
}

// required uint32 stream_id = 5;
inline bool PushPromiseFrame::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PushPromiseFrame::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void PushPromiseFrame::clear_stream_id() {
  stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushPromiseFrame::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushPromiseFrame::stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.PushPromiseFrame.stream_id)
  return _internal_stream_id();
}
inline void PushPromiseFrame::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stream_id_ = value;
}
inline void PushPromiseFrame::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.PushPromiseFrame.stream_id)
}

// -------------------------------------------------------------------

// PingFrame

// required uint32 opaque_data_lo = 1;
inline bool PingFrame::_internal_has_opaque_data_lo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PingFrame::has_opaque_data_lo() const {
  return _internal_has_opaque_data_lo();
}
inline void PingFrame::clear_opaque_data_lo() {
  opaque_data_lo_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingFrame::_internal_opaque_data_lo() const {
  return opaque_data_lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingFrame::opaque_data_lo() const {
  // @@protoc_insertion_point(field_get:h2proto.PingFrame.opaque_data_lo)
  return _internal_opaque_data_lo();
}
inline void PingFrame::_internal_set_opaque_data_lo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  opaque_data_lo_ = value;
}
inline void PingFrame::set_opaque_data_lo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opaque_data_lo(value);
  // @@protoc_insertion_point(field_set:h2proto.PingFrame.opaque_data_lo)
}

// required uint32 opaque_data_hi = 2;
inline bool PingFrame::_internal_has_opaque_data_hi() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PingFrame::has_opaque_data_hi() const {
  return _internal_has_opaque_data_hi();
}
inline void PingFrame::clear_opaque_data_hi() {
  opaque_data_hi_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingFrame::_internal_opaque_data_hi() const {
  return opaque_data_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingFrame::opaque_data_hi() const {
  // @@protoc_insertion_point(field_get:h2proto.PingFrame.opaque_data_hi)
  return _internal_opaque_data_hi();
}
inline void PingFrame::_internal_set_opaque_data_hi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  opaque_data_hi_ = value;
}
inline void PingFrame::set_opaque_data_hi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opaque_data_hi(value);
  // @@protoc_insertion_point(field_set:h2proto.PingFrame.opaque_data_hi)
}

// required bool ack = 3;
inline bool PingFrame::_internal_has_ack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PingFrame::has_ack() const {
  return _internal_has_ack();
}
inline void PingFrame::clear_ack() {
  ack_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PingFrame::_internal_ack() const {
  return ack_;
}
inline bool PingFrame::ack() const {
  // @@protoc_insertion_point(field_get:h2proto.PingFrame.ack)
  return _internal_ack();
}
inline void PingFrame::_internal_set_ack(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ack_ = value;
}
inline void PingFrame::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:h2proto.PingFrame.ack)
}

// -------------------------------------------------------------------

// GoawayFrame

// required uint32 last_stream_id = 1;
inline bool GoawayFrame::_internal_has_last_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GoawayFrame::has_last_stream_id() const {
  return _internal_has_last_stream_id();
}
inline void GoawayFrame::clear_last_stream_id() {
  last_stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GoawayFrame::_internal_last_stream_id() const {
  return last_stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GoawayFrame::last_stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.GoawayFrame.last_stream_id)
  return _internal_last_stream_id();
}
inline void GoawayFrame::_internal_set_last_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  last_stream_id_ = value;
}
inline void GoawayFrame::set_last_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.GoawayFrame.last_stream_id)
}

// required uint32 error_code = 2;
inline bool GoawayFrame::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GoawayFrame::has_error_code() const {
  return _internal_has_error_code();
}
inline void GoawayFrame::clear_error_code() {
  error_code_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GoawayFrame::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GoawayFrame::error_code() const {
  // @@protoc_insertion_point(field_get:h2proto.GoawayFrame.error_code)
  return _internal_error_code();
}
inline void GoawayFrame::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  error_code_ = value;
}
inline void GoawayFrame::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:h2proto.GoawayFrame.error_code)
}

// optional bytes opaque_data = 3;
inline bool GoawayFrame::_internal_has_opaque_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GoawayFrame::has_opaque_data() const {
  return _internal_has_opaque_data();
}
inline void GoawayFrame::clear_opaque_data() {
  opaque_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GoawayFrame::opaque_data() const {
  // @@protoc_insertion_point(field_get:h2proto.GoawayFrame.opaque_data)
  return _internal_opaque_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoawayFrame::set_opaque_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 opaque_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:h2proto.GoawayFrame.opaque_data)
}
inline std::string* GoawayFrame::mutable_opaque_data() {
  std::string* _s = _internal_mutable_opaque_data();
  // @@protoc_insertion_point(field_mutable:h2proto.GoawayFrame.opaque_data)
  return _s;
}
inline const std::string& GoawayFrame::_internal_opaque_data() const {
  return opaque_data_.Get();
}
inline void GoawayFrame::_internal_set_opaque_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opaque_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GoawayFrame::_internal_mutable_opaque_data() {
  _has_bits_[0] |= 0x00000001u;
  return opaque_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GoawayFrame::release_opaque_data() {
  // @@protoc_insertion_point(field_release:h2proto.GoawayFrame.opaque_data)
  if (!_internal_has_opaque_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opaque_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GoawayFrame::set_allocated_opaque_data(std::string* opaque_data) {
  if (opaque_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opaque_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:h2proto.GoawayFrame.opaque_data)
}

// -------------------------------------------------------------------

// WindowUpdateFrame

// required uint32 window_size_increment = 1;
inline bool WindowUpdateFrame::_internal_has_window_size_increment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowUpdateFrame::has_window_size_increment() const {
  return _internal_has_window_size_increment();
}
inline void WindowUpdateFrame::clear_window_size_increment() {
  window_size_increment_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowUpdateFrame::_internal_window_size_increment() const {
  return window_size_increment_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WindowUpdateFrame::window_size_increment() const {
  // @@protoc_insertion_point(field_get:h2proto.WindowUpdateFrame.window_size_increment)
  return _internal_window_size_increment();
}
inline void WindowUpdateFrame::_internal_set_window_size_increment(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  window_size_increment_ = value;
}
inline void WindowUpdateFrame::set_window_size_increment(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_window_size_increment(value);
  // @@protoc_insertion_point(field_set:h2proto.WindowUpdateFrame.window_size_increment)
}

// -------------------------------------------------------------------

// ContinuationFrame

// repeated .h2proto.HeaderField header_list = 1;
inline int ContinuationFrame::_internal_header_list_size() const {
  return header_list_.size();
}
inline int ContinuationFrame::header_list_size() const {
  return _internal_header_list_size();
}
inline void ContinuationFrame::clear_header_list() {
  header_list_.Clear();
}
inline ::h2proto::HeaderField* ContinuationFrame::mutable_header_list(int index) {
  // @@protoc_insertion_point(field_mutable:h2proto.ContinuationFrame.header_list)
  return header_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >*
ContinuationFrame::mutable_header_list() {
  // @@protoc_insertion_point(field_mutable_list:h2proto.ContinuationFrame.header_list)
  return &header_list_;
}
inline const ::h2proto::HeaderField& ContinuationFrame::_internal_header_list(int index) const {
  return header_list_.Get(index);
}
inline const ::h2proto::HeaderField& ContinuationFrame::header_list(int index) const {
  // @@protoc_insertion_point(field_get:h2proto.ContinuationFrame.header_list)
  return _internal_header_list(index);
}
inline ::h2proto::HeaderField* ContinuationFrame::_internal_add_header_list() {
  return header_list_.Add();
}
inline ::h2proto::HeaderField* ContinuationFrame::add_header_list() {
  ::h2proto::HeaderField* _add = _internal_add_header_list();
  // @@protoc_insertion_point(field_add:h2proto.ContinuationFrame.header_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::h2proto::HeaderField >&
ContinuationFrame::header_list() const {
  // @@protoc_insertion_point(field_list:h2proto.ContinuationFrame.header_list)
  return header_list_;
}

// required bool end_headers = 2;
inline bool ContinuationFrame::_internal_has_end_headers() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContinuationFrame::has_end_headers() const {
  return _internal_has_end_headers();
}
inline void ContinuationFrame::clear_end_headers() {
  end_headers_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ContinuationFrame::_internal_end_headers() const {
  return end_headers_;
}
inline bool ContinuationFrame::end_headers() const {
  // @@protoc_insertion_point(field_get:h2proto.ContinuationFrame.end_headers)
  return _internal_end_headers();
}
inline void ContinuationFrame::_internal_set_end_headers(bool value) {
  _has_bits_[0] |= 0x00000001u;
  end_headers_ = value;
}
inline void ContinuationFrame::set_end_headers(bool value) {
  _internal_set_end_headers(value);
  // @@protoc_insertion_point(field_set:h2proto.ContinuationFrame.end_headers)
}

// required uint32 stream_id = 3;
inline bool ContinuationFrame::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContinuationFrame::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void ContinuationFrame::clear_stream_id() {
  stream_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContinuationFrame::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContinuationFrame::stream_id() const {
  // @@protoc_insertion_point(field_get:h2proto.ContinuationFrame.stream_id)
  return _internal_stream_id();
}
inline void ContinuationFrame::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_id_ = value;
}
inline void ContinuationFrame::set_stream_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:h2proto.ContinuationFrame.stream_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace h2proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::h2proto::HeaderField_Indexing> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::h2proto::HeaderField_Indexing>() {
  return ::h2proto::HeaderField_Indexing_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_h2_5fframe_5fgrammar_2eproto
